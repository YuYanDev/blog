<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>毓彦</title>
  
  <subtitle>念念不忘 必有回响</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://www.yuyanlab.com/"/>
  <updated>2019-05-10T09:58:39.808Z</updated>
  <id>https://www.yuyanlab.com/</id>
  
  <author>
    <name>毓彦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小杨同学的上岸之旅</title>
    <link href="https://www.yuyanlab.com/post/firstjob/"/>
    <id>https://www.yuyanlab.com/post/firstjob/</id>
    <published>2019-05-10T09:57:00.000Z</published>
    <updated>2019-05-10T09:58:39.808Z</updated>
    
    <content type="html"><![CDATA[<p> <strong> 终于在大三的末尾，拿到了第一份job offer，感谢丁香园给的这个机会。</strong></p><p>在离公司不远的杭州滨江的合租房里，写下这篇博客，回想大学混过的这几年，似乎真的像当时计划那样走过来了，虽然各项指标都有点点缩水。</p><p>记得高考前，梦想就是去一所沿海的大学。可惜高考终究是一场带有运气的考试。面对现实，不得已放弃了去沿海，选择了一所内陆一本，指望着毕业后再跳去沿海。以前计划的是打算去广东，却阴差阳错的来了杭州。</p><p>大学初，辅导员叫我们写下了大学的计划和目标。当时我已经在计划上说得非常明确了，不想浪费太多时间在基础课上，想把更多时间投入编程中去。当然事实上也是这样过来的。按部就班的按照计划来。其它方面，四级过了，绩点也达标，毕业也不用担心了。当然大学期间非常感谢万老师和雷老师的指导，在他们那里，我才能接触大项目和参加比赛，一展身手。</p><h4 id="关于前端"><a href="#关于前端" class="headerlink" title="关于前端"></a>关于前端</h4><p>进入大学时本想在网络工程上一展身手的我,却误打误撞的选择了前端，原因很简单，漂亮清新的UI谁不喜欢。<br>从网络上听来的React到Vue，总是抱着一种心态去学：人家xx公司用xx，我也要用xxx这样的想法，导致之后没有跳出野路子学编程的局限性–太依赖框架。这一点在面试时，吃了不少的亏。便开始恶补基础：“哦，JS原来还能这样写”。直到现在，依然认为自己的基础还不扎实。<br>不过我决定把JS的各项常用方法的原理搞清楚，并捡起Golang，一年前曾经用Golang构建过一个简单的restful简单后台，感觉如今前端不掌握一门后端语言的话，出局的可能性非常大。</p><h4 id="关于杭州"><a href="#关于杭州" class="headerlink" title="关于杭州"></a>关于杭州</h4><p>杭州的选择，是源于女朋友的选择，她不喜欢吃杭州菜，但是却喜欢杭州。我呢，本来就没有什么目标城市，那就杭州吧。无法忍受异地恋的我，亦然决定了。其实当时杭州投的也没几家，阿里，字节，涂鸦，依图，酷家乐，丁香园，蘑菇街。也许涂鸦是进了备胎池吧，手里只有丁香园的offer的我，决定去了。其实考虑的思想也很单纯，无非就是加班不严重，有更多的时间陪女票，对付学业，提升自己，而且丁香园的面试体验挺好的。想想也挺不错的，加之各种面试面得有点疲惫了，于是选择了上岸。</p><p><em>现在只想好好工作，争取通过实习留下来，在杭州先站稳脚跟，和女票开开心心的生活下去</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;strong&gt; 终于在大三的末尾，拿到了第一份job offer，感谢丁香园给的这个机会。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在离公司不远的杭州滨江的合租房里，写下这篇博客，回想大学混过的这几年，似乎真的像当时计划那样走过来了，虽然各项指标都有点点缩水。&lt;/p&gt;
&lt;p&gt;记
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>总结2018，展望2019</title>
    <link href="https://www.yuyanlab.com/post/2018zj/"/>
    <id>https://www.yuyanlab.com/post/2018zj/</id>
    <published>2019-02-18T21:57:00.000Z</published>
    <updated>2019-02-19T06:31:23.019Z</updated>
    
    <content type="html"><![CDATA[<p>在大三开学之际，做一个总结，很久没有没有写博客了</p><p>2018年开始逐渐走上正路，加入了老师实验室，开始尝试接触项目和参加比赛，也多多少少取得一些成果</p><p>2018年，陪伴我最多的框架是Vue，积累了大量代码。也发现最大的短板是CSS和面向对象上。这也是来年要努力的目标</p><p>2018年，遇到了我的第一个女朋友，但是她比我大一岁，而她想去杭州，所以我也只好跟着去杭州了。</p><p>未来路都规划好了，以后想去抢WHV，移居想去的地方</p><p>2018年，玩无线电玩得非常开心，解锁了51个国家地区，非常充实的生活</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在大三开学之际，做一个总结，很久没有没有写博客了&lt;/p&gt;
&lt;p&gt;2018年开始逐渐走上正路，加入了老师实验室，开始尝试接触项目和参加比赛，也多多少少取得一些成果&lt;/p&gt;
&lt;p&gt;2018年，陪伴我最多的框架是Vue，积累了大量代码。也发现最大的短板是CSS和面向对象上。这也是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>glTF文件测试解析脚本</title>
    <link href="https://www.yuyanlab.com/post/gltfread/"/>
    <id>https://www.yuyanlab.com/post/gltfread/</id>
    <published>2019-02-18T15:57:00.000Z</published>
    <updated>2019-03-26T11:43:50.265Z</updated>
    
    <content type="html"><![CDATA[<p>glTF是由KhronosGroup所提出的一种三维模型格式，适用与webgl等场景</p><p>但是glTF是属于一种单个的模型格式，对于大型模型来说，glTF会造成内存吞吐量过大，从而遇到性能瓶颈。<br>由于博主做的研究是BIM模型的研究，对于模型单体使用glTF来说，产生了性能瓶颈，为此想从glTF迁移到3D Tiles格式<br>3D Tiles是由AnalyticalGraphicsInc提出的一种适用于存在场景调度的三维模型格式。它还是基于glTF的，但是通过一个tiles.json的索引，分成不同的范围，进行调度，从而减少内存吞吐量，减少卡顿</p><p>而博主的方向，就是从glTF针对BIM模型的特点，生成适用于BIM模型的3D Tiles格式模型。<br>目前有两个思路，思路1是利用kel tree的思想，二分拆分；思路2就是直接从Revit中，利用va3c插件，导出RevitDB的数据为json文件，使用json来构建3D Tiles。</p><p>要想通过kel tree的方式，首先要将glTF二进制包解析出来<br>脚本已经完成<a href="https://gist.github.com/YuYanDev/682ab06d9dd829d2f079d28c62665d1f" target="_blank" rel="noopener">https://gist.github.com/YuYanDev/682ab06d9dd829d2f079d28c62665d1f</a><br>接下来是脚本的原理<br><a id="more"></a></p><p>详细解析流程已经通过注释的方式编写在上面的gist里了</p><p>这是Revit中一面墙中的部分数据,解析数据位于文章底部</p><p>虽然解析出来了，但是通过kel tree的方式明显不适用。对于混杂的三角形，二分拆分明显不合适</p><p>所以博主接下来要利用va3c插件，导出RevitDB的数据为json文件，使用json来构建3D Tiles。</p><p>测试样例数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><span class="line">网格: 0 ;</span><br><span class="line">(使用材质编号: 0 , 网格位置 对应访问器编号: 1, 网格法向量 对应访问器编号: undefined, indices编号: 0 )</span><br><span class="line">----------</span><br><span class="line">0网格位置 对应访问器编号: 1, </span><br><span class="line">0网格位置 访问器对应bufferview: 1，访问器对应buffer: 0，共计4个元素，属于 VEC3</span><br><span class="line">点0的X: 0</span><br><span class="line">点0的Y: 15</span><br><span class="line">点0的Z: 0</span><br><span class="line"></span><br><span class="line">点1的X: 0</span><br><span class="line">点1的Y: -15</span><br><span class="line">点1的Z: 0</span><br><span class="line"></span><br><span class="line">点2的X: 30</span><br><span class="line">点2的Y: 15</span><br><span class="line">点2的Z: 0</span><br><span class="line"></span><br><span class="line">点3的X: 0</span><br><span class="line">点3的Y: 15</span><br><span class="line">点3的Z: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">网格: 1 ;</span><br><span class="line">(使用材质编号: 1 , 网格位置 对应访问器编号: 3, 网格法向量 对应访问器编号: 4, indices编号: 2 )</span><br><span class="line">----------</span><br><span class="line">1网格位置 对应访问器编号: 3, </span><br><span class="line">1网格位置 访问器对应bufferview: 3，访问器对应buffer: 0，共计28个元素，属于 VEC3</span><br><span class="line">点0的X: 2.7770421504974365</span><br><span class="line">点0的Y: 4.24535608291626</span><br><span class="line">点0的Z: 1.3234889800848443e-23</span><br><span class="line"></span><br><span class="line">点1的X: 2.7770421504974365</span><br><span class="line">点1的Y: 12.11937141418457</span><br><span class="line">点1的Z: 1.3234889800848443e-23</span><br><span class="line"></span><br><span class="line">点2的X: 2.7770421504974365</span><br><span class="line">点2的Y: 12.77553939819336</span><br><span class="line">点2的Z: -1.3234889800848443e-23</span><br><span class="line"></span><br><span class="line">点3的X: 2.7770421504974365</span><br><span class="line">点3的Y: 12.77553939819336</span><br><span class="line">点3的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点4的X: 2.7770421504974365</span><br><span class="line">点4的Y: 12.11937141418457</span><br><span class="line">点4的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点5的X: 2.7770421504974365</span><br><span class="line">点5的Y: 4.24535608291626</span><br><span class="line">点5的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点6的X: 2.1208741664886475</span><br><span class="line">点6的Y: 4.24535608291626</span><br><span class="line">点6的Z: 0</span><br><span class="line"></span><br><span class="line">点7的X: 2.1208741664886475</span><br><span class="line">点7的Y: 4.24535608291626</span><br><span class="line">点7的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点8的X: 2.1208741664886475</span><br><span class="line">点8的Y: 12.77553939819336</span><br><span class="line">点8的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点9的X: 2.1208741664886475</span><br><span class="line">点9的Y: 12.77553939819336</span><br><span class="line">点9的Z: 0</span><br><span class="line"></span><br><span class="line">点10的X: 2.7770421504974365</span><br><span class="line">点10的Y: 12.77553939819336</span><br><span class="line">点10的Z: 0</span><br><span class="line"></span><br><span class="line">点11的X: 2.7770421504974365</span><br><span class="line">点11的Y: 12.11937141418457</span><br><span class="line">点11的Z: 0</span><br><span class="line"></span><br><span class="line">点12的X: 2.7770421504974365</span><br><span class="line">点12的Y: 4.24535608291626</span><br><span class="line">点12的Z: 0</span><br><span class="line"></span><br><span class="line">点13的X: 2.1208741664886475</span><br><span class="line">点13的Y: 4.24535608291626</span><br><span class="line">点13的Z: 0</span><br><span class="line"></span><br><span class="line">点14的X: 2.1208741664886475</span><br><span class="line">点14的Y: 12.77553939819336</span><br><span class="line">点14的Z: 0</span><br><span class="line"></span><br><span class="line">点15的X: 2.7770421504974365</span><br><span class="line">点15的Y: 4.24535608291626</span><br><span class="line">点15的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点16的X: 2.7770421504974365</span><br><span class="line">点16的Y: 12.11937141418457</span><br><span class="line">点16的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点17的X: 2.7770421504974365</span><br><span class="line">点17的Y: 12.77553939819336</span><br><span class="line">点17的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点18的X: 2.1208741664886475</span><br><span class="line">点18的Y: 12.77553939819336</span><br><span class="line">点18的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点19的X: 2.1208741664886475</span><br><span class="line">点19的Y: 4.24535608291626</span><br><span class="line">点19的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点20的X: 2.7770421504974365</span><br><span class="line">点20的Y: 4.24535608291626</span><br><span class="line">点20的Z: 0</span><br><span class="line"></span><br><span class="line">点21的X: 2.7770421504974365</span><br><span class="line">点21的Y: 4.24535608291626</span><br><span class="line">点21的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点22的X: 2.1208741664886475</span><br><span class="line">点22的Y: 4.24535608291626</span><br><span class="line">点22的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点23的X: 2.1208741664886475</span><br><span class="line">点23的Y: 4.24535608291626</span><br><span class="line">点23的Z: 0</span><br><span class="line"></span><br><span class="line">点24的X: 2.7770421504974365</span><br><span class="line">点24的Y: 12.77553939819336</span><br><span class="line">点24的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">点25的X: 2.7770421504974365</span><br><span class="line">点25的Y: 12.77553939819336</span><br><span class="line">点25的Z: 0</span><br><span class="line"></span><br><span class="line">点26的X: 2.1208741664886475</span><br><span class="line">点26的Y: 12.77553939819336</span><br><span class="line">点26的Z: 0</span><br><span class="line"></span><br><span class="line">点27的X: 2.1208741664886475</span><br><span class="line">点27的Y: 12.77553939819336</span><br><span class="line">点27的Z: 13.123359680175781</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">1网格法向量 对应访问器编号: 3, </span><br><span class="line">1网格法向量 访问器对应bufferview: 3，访问器对应buffer: 0，共计28个元素，属于 VEC3</span><br><span class="line">点0的X: 1</span><br><span class="line">点0的Y: -1.6353013956060575e-15</span><br><span class="line">点0的Z: 0</span><br><span class="line"></span><br><span class="line">点1的X: 1</span><br><span class="line">点1的Y: -1.6353013956060575e-15</span><br><span class="line">点1的Z: 0</span><br><span class="line"></span><br><span class="line">点2的X: 1</span><br><span class="line">点2的Y: -1.6353013956060575e-15</span><br><span class="line">点2的Z: 0</span><br><span class="line"></span><br><span class="line">点3的X: 1</span><br><span class="line">点3的Y: -1.6353013956060575e-15</span><br><span class="line">点3的Z: 0</span><br><span class="line"></span><br><span class="line">点4的X: 1</span><br><span class="line">点4的Y: -1.6353013956060575e-15</span><br><span class="line">点4的Z: 0</span><br><span class="line"></span><br><span class="line">点5的X: 1</span><br><span class="line">点5的Y: -1.6353013956060575e-15</span><br><span class="line">点5的Z: 0</span><br><span class="line"></span><br><span class="line">点6的X: -1</span><br><span class="line">点6的Y: 1.6353013956060575e-15</span><br><span class="line">点6的Z: 0</span><br><span class="line"></span><br><span class="line">点7的X: -1</span><br><span class="line">点7的Y: 1.6353013956060575e-15</span><br><span class="line">点7的Z: 0</span><br><span class="line"></span><br><span class="line">点8的X: -1</span><br><span class="line">点8的Y: 1.6353013956060575e-15</span><br><span class="line">点8的Z: 0</span><br><span class="line"></span><br><span class="line">点9的X: -1</span><br><span class="line">点9的Y: 1.6353013956060575e-15</span><br><span class="line">点9的Z: 0</span><br><span class="line"></span><br><span class="line">点10的X: 0</span><br><span class="line">点10的Y: 0</span><br><span class="line">点10的Z: -1</span><br><span class="line"></span><br><span class="line">点11的X: 0</span><br><span class="line">点11的Y: 0</span><br><span class="line">点11的Z: -1</span><br><span class="line"></span><br><span class="line">点12的X: 0</span><br><span class="line">点12的Y: 0</span><br><span class="line">点12的Z: -1</span><br><span class="line"></span><br><span class="line">点13的X: 0</span><br><span class="line">点13的Y: 0</span><br><span class="line">点13的Z: -1</span><br><span class="line"></span><br><span class="line">点14的X: 0</span><br><span class="line">点14的Y: 0</span><br><span class="line">点14的Z: -1</span><br><span class="line"></span><br><span class="line">点15的X: 0</span><br><span class="line">点15的Y: 0</span><br><span class="line">点15的Z: 1</span><br><span class="line"></span><br><span class="line">点16的X: 0</span><br><span class="line">点16的Y: 0</span><br><span class="line">点16的Z: 1</span><br><span class="line"></span><br><span class="line">点17的X: 0</span><br><span class="line">点17的Y: 0</span><br><span class="line">点17的Z: 1</span><br><span class="line"></span><br><span class="line">点18的X: 0</span><br><span class="line">点18的Y: 0</span><br><span class="line">点18的Z: 1</span><br><span class="line"></span><br><span class="line">点19的X: 0</span><br><span class="line">点19的Y: 0</span><br><span class="line">点19的Z: 1</span><br><span class="line"></span><br><span class="line">点20的X: -1.3535839548216712e-15</span><br><span class="line">点20的Y: -1</span><br><span class="line">点20的Z: 0</span><br><span class="line"></span><br><span class="line">点21的X: -1.3535839548216712e-15</span><br><span class="line">点21的Y: -1</span><br><span class="line">点21的Z: 0</span><br><span class="line"></span><br><span class="line">点22的X: -1.3535839548216712e-15</span><br><span class="line">点22的Y: -1</span><br><span class="line">点22的Z: 0</span><br><span class="line"></span><br><span class="line">点23的X: -1.3535839548216712e-15</span><br><span class="line">点23的Y: -1</span><br><span class="line">点23的Z: 0</span><br><span class="line"></span><br><span class="line">点24的X: 3.1358252379856157e-15</span><br><span class="line">点24的Y: 1</span><br><span class="line">点24的Z: 0</span><br><span class="line"></span><br><span class="line">点25的X: 3.1358252379856157e-15</span><br><span class="line">点25的Y: 1</span><br><span class="line">点25的Z: 0</span><br><span class="line"></span><br><span class="line">点26的X: 3.1358252379856157e-15</span><br><span class="line">点26的Y: 1</span><br><span class="line">点26的Z: 0</span><br><span class="line"></span><br><span class="line">点27的X: 3.1358252379856157e-15</span><br><span class="line">点27的Y: 1</span><br><span class="line">点27的Z: 0</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">1网格indices 对应访问器编号: 2, </span><br><span class="line">1网格indices 访问器对应bufferview: 2，访问器对应buffer: 0，共计48个元素，属于 SCALAR</span><br><span class="line">0: 5</span><br><span class="line">1: 0</span><br><span class="line">2: 1</span><br><span class="line">3: 5</span><br><span class="line">4: 1</span><br><span class="line">5: 4</span><br><span class="line">6: 1</span><br><span class="line">7: 3</span><br><span class="line">8: 4</span><br><span class="line">9: 3</span><br><span class="line">10: 1</span><br><span class="line">11: 2</span><br><span class="line">12: 8</span><br><span class="line">13: 9</span><br><span class="line">14: 7</span><br><span class="line">15: 6</span><br><span class="line">16: 7</span><br><span class="line">17: 9</span><br><span class="line">18: 11</span><br><span class="line">19: 13</span><br><span class="line">20: 14</span><br><span class="line">21: 13</span><br><span class="line">22: 11</span><br><span class="line">23: 12</span><br><span class="line">24: 11</span><br><span class="line">25: 14</span><br><span class="line">26: 10</span><br><span class="line">27: 16</span><br><span class="line">28: 18</span><br><span class="line">29: 19</span><br><span class="line">30: 18</span><br><span class="line">31: 16</span><br><span class="line">32: 17</span><br><span class="line">33: 16</span><br><span class="line">34: 19</span><br><span class="line">35: 15</span><br><span class="line">36: 20</span><br><span class="line">37: 21</span><br><span class="line">38: 22</span><br><span class="line">39: 22</span><br><span class="line">40: 23</span><br><span class="line">41: 20</span><br><span class="line">42: 24</span><br><span class="line">43: 25</span><br><span class="line">44: 26</span><br><span class="line">45: 26</span><br><span class="line">46: 27</span><br><span class="line">47: 24</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;glTF是由KhronosGroup所提出的一种三维模型格式，适用与webgl等场景&lt;/p&gt;
&lt;p&gt;但是glTF是属于一种单个的模型格式，对于大型模型来说，glTF会造成内存吞吐量过大，从而遇到性能瓶颈。&lt;br&gt;由于博主做的研究是BIM模型的研究，对于模型单体使用glTF来说，产生了性能瓶颈，为此想从glTF迁移到3D Tiles格式&lt;br&gt;3D Tiles是由AnalyticalGraphicsInc提出的一种适用于存在场景调度的三维模型格式。它还是基于glTF的，但是通过一个tiles.json的索引，分成不同的范围，进行调度，从而减少内存吞吐量，减少卡顿&lt;/p&gt;
&lt;p&gt;而博主的方向，就是从glTF针对BIM模型的特点，生成适用于BIM模型的3D Tiles格式模型。&lt;br&gt;目前有两个思路，思路1是利用kel tree的思想，二分拆分；思路2就是直接从Revit中，利用va3c插件，导出RevitDB的数据为json文件，使用json来构建3D Tiles。&lt;/p&gt;
&lt;p&gt;要想通过kel tree的方式，首先要将glTF二进制包解析出来&lt;br&gt;脚本已经完成&lt;a href=&quot;https://gist.github.com/YuYanDev/682ab06d9dd829d2f079d28c62665d1f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gist.github.com/YuYanDev/682ab06d9dd829d2f079d28c62665d1f&lt;/a&gt;&lt;br&gt;接下来是脚本的原理&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>短波开台，DX之旅</title>
    <link href="https://www.yuyanlab.com/post/HF-Radio/"/>
    <id>https://www.yuyanlab.com/post/HF-Radio/</id>
    <published>2018-10-09T08:39:00.000Z</published>
    <updated>2018-10-09T08:21:51.391Z</updated>
    
    <content type="html"><![CDATA[<p>经历了多天磨难后，毓彦的短波电台设立了，使用了Yaesu FT-891收发信机，然后使用了天调</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经历了多天磨难后，毓彦的短波电台设立了，使用了Yaesu FT-891收发信机，然后使用了天调&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cabrillo.js的诞生</title>
    <link href="https://www.yuyanlab.com/post/carbillo-js/"/>
    <id>https://www.yuyanlab.com/post/carbillo-js/</id>
    <published>2018-08-01T04:24:00.000Z</published>
    <updated>2018-08-01T07:55:11.722Z</updated>
    
    <content type="html"><![CDATA[<p>Cabrillo是一种运用于业余无线电竞赛的日志格式，在Github上找了一圈，发现有Ruby和python写的，想了想，不如用我比较熟悉的js弄一个cabrillo的解析库。</p><p>目前发布的是0.1.0版本，准备在重构后推出0.2.0版本。同样会在集成node-adif两个库后推出cli工具。<br>但是意外的是，我在国内外的ham论坛里推广了下发现没有这类的需求，所以在第一条issue出来前是不会开工的，相反大家对c++的解析更感兴趣？？？用electron封装不是更好？？？</p><p>实现的是cabrillo和json的互相转换，目前是兼容了CQWW，CQWPX，和ARRL标准模板的cabrillo和json互相转换。同时兼容浏览器和node环境</p><p>Github: <a href="https://github.com/YuYanDev/cabrillo.js" target="_blank" rel="noopener">https://github.com/YuYanDev/cabrillo.js</a></p><p>这是第一个写的有点像样子的js库，全部使用ES5标准写的，标准英文驼峰命名。</p><p>整个库编写难点就是在于Cabrillo缩进问题，呼号不足要用占位符补全。<br>但是js对空格的补全处理非常鸡肋，在html环境下得用<code>&amp;nbsp;</code>，所以我单独封装了函数<code>creatVariableQsoField</code>来专门处理这个问题，这个函数将原始字符串，长度，对其方式传入，当字符串大于长度时抛出错误，不足时按长度补全空格后返回处理好的字符串。</p><p>关于json的处理的理解和能力提升了很多</p><p>在库的开发方面还是需要提高姿势水平啊</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cabrillo是一种运用于业余无线电竞赛的日志格式，在Github上找了一圈，发现有Ruby和python写的，想了想，不如用我比较熟悉的js弄一个cabrillo的解析库。&lt;/p&gt;
&lt;p&gt;目前发布的是0.1.0版本，准备在重构后推出0.2.0版本。同样会在集成node-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字模式初体验FT8</title>
    <link href="https://www.yuyanlab.com/post/Digital-communication-test/"/>
    <id>https://www.yuyanlab.com/post/Digital-communication-test/</id>
    <published>2018-05-28T08:39:00.000Z</published>
    <updated>2018-05-28T14:53:31.551Z</updated>
    
    <content type="html"><![CDATA[<p>数字通信一直是业余无线电发展的方向。今天说的不是DMR之类的数字信号，而是诸如FT8/JT65之类的数字模式。</p><p>传统上大家都是用SSB或者CW模式进行通联，或者有些时候也会用RTTY传统数传的方式通联。这些模式在目前日益糟糕的电磁环境下，已经很难dx或者有较好的通联效果了。而FT8/JT65这类新出现的数字模式，则具有更好的效果。</p><p>更具ham们的经验，借晨昏线40-60W即可无压力通欧洲，更多情况下，大家还是更热衷于FT8的QRP通联，具体的实际效果呢，hellocq等很多地方有很多记录啦，看着非常羡慕。</p><a id="more"></a><p>由于博主目前A证最多只能在6m波段操作，而且没有6m的收发信台，再者6m的E突发层传播这个东西还是看脸的，所以只能够借助SDR收信机来过过瘾，学习学习，等台子架起来后，也就很快能够进行通联了。</p><p>首先是JT65，这是由诺贝尔奖获得者K1JT发明的，优点是抗干扰和loss强，所以通常被EME月面反射玩家采用，缺点就是对时间精度要求非常高，而且传送一次数据需要1分钟（俗称老头乐233333）。FT8是进两年才诞生的，实际效果也被JT65好很多，所以目前非常流行。博主也尝试接收了一下信号。</p><p>首先是收信机，目前最便宜的解决方案是电视棒，然后改Q通道，实现短波接收，但是天线嘛，小于1/4波长玩个锤子，无限垫的核心问题。由于博主目前处于极度吃土的状态，所以用网上的websdr作为接收源qwq</p><p>然后就是解码器。其他的没玩过，因为其他的压根不支持Mac OS High Sierra故此推荐WSJT-X，<a href="https://physics.princeton.edu/pulsar/k1jt/wsjtx.html" target="_blank" rel="noopener">https://physics.princeton.edu/pulsar/k1jt/wsjtx.html</a><br>请注意使用新版本。</p><p>然后更具不同的情况使用不同的方式，我这里因为是websdr，音源由浏览器提供，所以是对声音增加了双输出，內建和扬声器，然后把WSJT-X选择內建输入。实际电台操作的话，用外置声卡和cat控制即可</p><p>在websdr上调至7074khzUSB模式，可以在瀑布图上看到清晰的载波信号，然后下面有接收进度条，解码出来就会在左边显示接收的数据。如图<br><img src="/image/sdr.png" alt=""></p><p>good luck and have fun！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数字通信一直是业余无线电发展的方向。今天说的不是DMR之类的数字信号，而是诸如FT8/JT65之类的数字模式。&lt;/p&gt;
&lt;p&gt;传统上大家都是用SSB或者CW模式进行通联，或者有些时候也会用RTTY传统数传的方式通联。这些模式在目前日益糟糕的电磁环境下，已经很难dx或者有较好的通联效果了。而FT8/JT65这类新出现的数字模式，则具有更好的效果。&lt;/p&gt;
&lt;p&gt;更具ham们的经验，借晨昏线40-60W即可无压力通欧洲，更多情况下，大家还是更热衷于FT8的QRP通联，具体的实际效果呢，hellocq等很多地方有很多记录啦，看着非常羡慕。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js玩家的数据库初体验</title>
    <link href="https://www.yuyanlab.com/post/dbstudy/"/>
    <id>https://www.yuyanlab.com/post/dbstudy/</id>
    <published>2018-05-02T11:39:00.000Z</published>
    <updated>2018-05-02T11:56:50.226Z</updated>
    
    <content type="html"><![CDATA[<p>这学期的专业课有一门就是数据库。课也快上完了，但是我个人认为这是一门没有什么卵用的课程，忽略了实际运用，只讲理论，这也是我非常不爽的原因。</p><p>都8102年了，还TM在用SQL Server 2008。这和我个人风格是非常不符合的，在之前，高中时学习了Access数据库，而大学我一直在使用了MongoDB这类缓存型数据库，体验还是不错。这次我使用的是MySQL数据库，这是我比较喜欢的关系型数据库。</p><p>让我们定个小目标，写个电台日志！这可是非常简单了，一张表就能搞定。成品在: <a href="https://bg6tti.intl.moe/" target="_blank" rel="noopener">https://bg6tti.intl.moe/</a>（懒癌的我没有更新）<br><a id="more"></a></p><p>分析下电台日志需要什么？随便找一张QSL卡片，上面就记录了你需要些什么，日期，UTC时间，对方呼号，频率，通联模式，信号报告，备注，甚至还需要记录自己的天线和操作员等。</p><p>好啦，创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> Radiolog</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Radiolog (IndexID <span class="built_in">int</span>, CALLSIGN <span class="built_in">varchar</span>(<span class="number">16</span>), <span class="built_in">DATE</span> <span class="built_in">date</span>, UTCTIME <span class="keyword">time</span>, MHZ <span class="built_in">varchar</span>(<span class="number">32</span>), RST <span class="built_in">varchar</span>(<span class="number">16</span>), <span class="keyword">MODE</span> <span class="built_in">varchar</span>(<span class="number">16</span>), RMKS <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Radiolog <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>博主语言学习能力不强，C/C++写不好，Java不会，Golang半吊子，唯一熟悉的就只剩js了，所以，目前所以操作均在Node.js环境中完成（这大概可能就是算法不好的原因了）</p><p>在Node.js中，官方硬点(雾)了mysql这个包作为连接件。为了提高性能，还是要开个连接池</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pool = mysql.createPool(&#123;</span><br><span class="line">    host     : <span class="string">'localhost'</span>,</span><br><span class="line">    user     : <span class="string">'user'</span>,</span><br><span class="line">    password : <span class="string">'password'</span>,</span><br><span class="line">    port: <span class="string">'3306'</span>,</span><br><span class="line">    database: <span class="string">'Radiolog'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = pool;</span><br></pre></td></tr></table></figure><p>由于博主主要是玩React/Vue的，比较崇尚使用Restful API，所以都是写接口，不使用服务端渲染。但是原理都一样。</p><p>不知道他们为什么那么讨厌回调，只要回调层数不大于6层都还好啊？？？</p><p>这是个最基本的玩法，展示下数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql  = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> pool = <span class="built_in">require</span>(<span class="string">'./pool.js'</span>);</span><br><span class="line"></span><br><span class="line">pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"mysql pool connect error"</span>)</span><br><span class="line">        connection.release();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> totalSub = <span class="string">"select count(*) from Radiolog"</span></span><br><span class="line">    connection.query(totalSub,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"mysql pool connect error"</span>)</span><br><span class="line">            connection.release();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(result[<span class="number">0</span>][<span class="string">'count(*)'</span>])</span><br><span class="line">        connection.release();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对应的每个接口，根据不同的请求query，然后拼接SQL语句，最后把结果抛出或者直接写回调，然后你的轮子就实现功能了。</p><p>蛮简单的。</p><p>不过，电台日志有专用的ADIF文件，这也是下一步博主在业余无线电编程的方向。<br>关于数据库，接下来尝试给博客编写个类似disqus的评论系统吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这学期的专业课有一门就是数据库。课也快上完了，但是我个人认为这是一门没有什么卵用的课程，忽略了实际运用，只讲理论，这也是我非常不爽的原因。&lt;/p&gt;
&lt;p&gt;都8102年了，还TM在用SQL Server 2008。这和我个人风格是非常不符合的，在之前，高中时学习了Access数据库，而大学我一直在使用了MongoDB这类缓存型数据库，体验还是不错。这次我使用的是MySQL数据库，这是我比较喜欢的关系型数据库。&lt;/p&gt;
&lt;p&gt;让我们定个小目标，写个电台日志！这可是非常简单了，一张表就能搞定。成品在: &lt;a href=&quot;https://bg6tti.intl.moe/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bg6tti.intl.moe/&lt;/a&gt;（懒癌的我没有更新）&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>业余无线电的初入门及常用网站</title>
    <link href="https://www.yuyanlab.com/post/startingHamRadio/"/>
    <id>https://www.yuyanlab.com/post/startingHamRadio/</id>
    <published>2018-04-30T08:36:00.000Z</published>
    <updated>2018-05-02T10:58:04.087Z</updated>
    
    <content type="html"><![CDATA[<p>我这根香肠烤成火腿，大概经历了五个来月吧，现在准备FCC的Tech和General级别的考试，然后年底准备考B上短波</p><h3 id="首先，什么是业余无线电"><a href="#首先，什么是业余无线电" class="headerlink" title="首先，什么是业余无线电"></a>首先，什么是业余无线电</h3><blockquote><p>业余无线电（英语：Amateur Radio），也被称作火腿电台（英语：ham radio）是一种供业余无线电爱好者进行非盈利信息交换、无线通讯技术实验、自我训练、个人娱乐、无线电运动、竞赛以及应急通信的一项使用无线电频率频谱的无线电业务。其中“业余无线电爱好者”指“经过正式批准的、对无线电技术有兴趣的人，其兴趣系个人爱好而不涉及牟取利润（直接的利润或是间接的奖赏）”。业余无线电与商业广播、公共安全无线电（例如警用与消防用无线电）或者其他专业双向无线电业务（例如船用、航空和公众对讲机无线电）存在区别，业余无线电并非这些专业无线电业务的业余形式，也不是有关这些业务的业余爱好，而是一项独立的无线电业务。（Wikipedia）</p></blockquote><p>自己可以设立一个自己的个人业余电台，是不是想想就兴奋呢？</p><p>不过业余电台和商业电台不同，业余电台不得广播，也就是只能和其他业余电台通讯，而且不得传播商业内容，这是非盈利的。<br><a id="more"></a><br>电台都有呼号，个人业余电台对应每个设台人，国际给中国的电台呼号分配的是B开头，当然因为历史原因3H-3U以及XS也是属于中国的，一些老业余家可能会持有XS呼号，民国年间分配，有些专业台使用3H-3U，只是基本没有人收到过了。</p><p>在2013年前，中国的业余电台是分等级的，BA对应一级，BD对应二级，BG对应三四五级，号段用完后使用H,I为第二位。所以就会出现某人为BA1WXW ex BD1WXW BI1WXW的情况。但是13年后，分级制度取消后，电台呼号就不变更了，G用完了用H,I如果I用完了到D，D用完了到A，比如目前广东就有很多新火腿拿到的呼号是BD7开头的。BY为集体台，于13年停止分配了，原来分配的不受影响继续使用，BZ则是老的个人呼号，在92年BA出现后就废除了。</p><h3 id="如何获取呼号"><a href="#如何获取呼号" class="headerlink" title="如何获取呼号"></a>如何获取呼号</h3><p>首先你需要通过考试考取CRAC业余无线电操作证，目前分为A,B,C三种证书，且无年龄限制。</p><p>A类只要本地有考试，随时可以考取，具体可以咨询当地无线电管理委员会或者业余无线电协会，HAM们都特别热心的。考试是30道题25道通过，如果当地考试卡人数的话，可能需要考得更高才能通过。题库在网上均可找到。但是A类仅可以在50-54/144-148/430-440MHZ操作，最大限制功率25W。<br>当取得A类操作证半年后，可以报考B类的，B类就可以在所有业余段使用了，短波限制100W功率。取得B类两年后就可以考C类了，可以短波玩到1KW。</p><p>取得A类操作证后就可以去申请设立业余电台了，但需要年满18岁，否则就只能去蹭台了。<br>各地的流程不一样，最好提前咨询，基本的顺序是验机，取得合格证明，然后填写国无管表4和17，准备各种复印件，去无管会申请，即可办理。<br>最后拿到一本中华人民共和国无线电台执照，然后上面给你指配呼号。<br>比如毓彦的呼号是BG6TTI。别忘了年审。</p><p>这里再介绍下FCC的考试，取得美国的执照，但是没国内那么复杂。FCC执照可以一口气考，分为Tech/General/Extra三种，类似国内ABC三种。只是这个只要你有能力，一天之内可以直接考到Extra。然后ARRL会在你的执照上直接指配你的美国呼号，W/K/A开头都有可能，分配方式类似国内。<br>注意，这个呼号不能在美国领土/公海以外的地方使用，但是这个可以很方便的在其他国家拿到临时呼号，许多国家都认可FCC执照。比如来自BG2KAJ的经验，在日本可以领取一个有效期等于你签证时间的临时呼号，也可以在日本友人家里使用他日本呼号/你美国呼号的方式操作。</p><h3 id="入门玩法"><a href="#入门玩法" class="headerlink" title="入门玩法"></a>入门玩法</h3><p>成本最低的入门方式，买个宝峰UV5R，一两百块钱，考试就几十块钱，然后再淘根不错的天线，就可以开始无限垫（大雾）之旅了。当然，如果预算充足的话，建议还是买个好一点的。</p><p>直频呼叫，只是最基本的功能，但是距离有限，所以你需要中继。通过中继，你的通讯可以从几公里扩大到上百公里。湖北这边的中继是联网链路，所以你在中继一呼，基本大半个省都能收到。中继上有很多ham，渐渐融入圈子里。当然，约饭出游等腐败活动适度参与，笔者个人不提倡也不反对。</p><p>如果高端一点，可以试试卫星中继通联。很多通信卫星上带了中继设备，只是这个需要一根八木天线和一个功率稍大的台子，因为你信号很有可能穿不过电离层。这样你的通讯距离就可以达到上千公里。</p><p>到了B证后，短波玩法就更多了，DIY个电路在7.023上cw什么的，或者高频数据链路什么的。</p><h3 id="一些网站的注册"><a href="#一些网站的注册" class="headerlink" title="一些网站的注册"></a>一些网站的注册</h3><p>国内几个不错的网站</p><ul><li><a href="http://www.hellocq.net/forum/" target="_blank" rel="noopener">HelloCQ</a> (俗称精神病院)</li><li><a href="http://www.qrz.cn" target="_blank" rel="noopener">qrz.cn</a> 国内的qrz.com</li></ul><p>国外就比较多了</p><p>首先是Lotw。ARRL于2003年推出 ARRL’s Logbook of the World (LoTW)系统。该系统能交叉确认的通联纪录，相当于一个联网的电台日志，方便申请奖状。但是审核非常严格，官方软件为TrustedQSL，首先你申请，它生产一张证书，并传给ARRL。然后你需要把你护照/身份证，操作证，电台执照的扫描件，发给ARRL，在2018年以前，需要邮寄到ARRL总部，但是2018年后，电子邮件也可以提交了，当ARRL确认了你的身份信息后，会给你发送tq6激活证书。然后导入软件后，你就可以给你的电台日志签名提交了，tq6是一次性的，你可以导出p12证书，就可以多机部署了。</p><p>其次是<a href="http://www.qrz.com" target="_blank" rel="noopener">Qrz.com </a>这个是给你提供联系方式用的，注册后需要去论坛发贴，志愿者会给你确认。</p><p>还有就是<a href="http://www.qsl.net" target="_blank" rel="noopener">qsl.net</a>你可以理解成这是个给HAM的免费ftp托管空间。类似github pages的服务</p><p>还有就是eqsl，电子版的QSL卡片，省钱而且快速。</p><hr><p>祝各位对业余无线电感兴趣的香肠朋友早日取得呼号 DE BG6TTI</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我这根香肠烤成火腿，大概经历了五个来月吧，现在准备FCC的Tech和General级别的考试，然后年底准备考B上短波&lt;/p&gt;
&lt;h3 id=&quot;首先，什么是业余无线电&quot;&gt;&lt;a href=&quot;#首先，什么是业余无线电&quot; class=&quot;headerlink&quot; title=&quot;首先，什么是业余无线电&quot;&gt;&lt;/a&gt;首先，什么是业余无线电&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;业余无线电（英语：Amateur Radio），也被称作火腿电台（英语：ham radio）是一种供业余无线电爱好者进行非盈利信息交换、无线通讯技术实验、自我训练、个人娱乐、无线电运动、竞赛以及应急通信的一项使用无线电频率频谱的无线电业务。其中“业余无线电爱好者”指“经过正式批准的、对无线电技术有兴趣的人，其兴趣系个人爱好而不涉及牟取利润（直接的利润或是间接的奖赏）”。业余无线电与商业广播、公共安全无线电（例如警用与消防用无线电）或者其他专业双向无线电业务（例如船用、航空和公众对讲机无线电）存在区别，业余无线电并非这些专业无线电业务的业余形式，也不是有关这些业务的业余爱好，而是一项独立的无线电业务。（Wikipedia）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自己可以设立一个自己的个人业余电台，是不是想想就兴奋呢？&lt;/p&gt;
&lt;p&gt;不过业余电台和商业电台不同，业余电台不得广播，也就是只能和其他业余电台通讯，而且不得传播商业内容，这是非盈利的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于前端路由系统的简单分析与实践</title>
    <link href="https://www.yuyanlab.com/post/create-hash-router/"/>
    <id>https://www.yuyanlab.com/post/create-hash-router/</id>
    <published>2018-02-27T12:36:00.000Z</published>
    <updated>2018-05-02T10:58:26.521Z</updated>
    
    <content type="html"><![CDATA[<p>你也许会在很多网站上看到他们的链接都是<code>http://example.com/#/xxx</code>的形式，而且加载速度非常快。如果你是React/vue/ng的开发者，那你应该也对这个东西非常熟悉。今天就分析一下hash路由的原理。<br><a id="more"></a></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>hash路由是一个hashtag升级实现形式，以前通常使用hashbang实现也就是<code>#!</code>这个标志，为的是不与jquery冲突，而现在随着MVVM框架的普及，越来越多的hash路由系统选择了<code>#</code>。而在url中<code>#</code>像分隔符一样，<code>#</code>及它以后的东西并不会改变请求url。所以这就给我们留下了动手空间。</p><p>好了，一个最简单的hash系统需要有些东西呢？</p><ol><li>路由表</li><li>一个刷新器</li><li>回调机制</li></ol><p>让我们回到万恶之源<code>location.hash</code>,这是获取与改变location.hash的最基本的方式,当然你还可以通过改变url的方式改变hash，诸如<code>location.href</code> ,<code>&lt;a href=&quot;#/xx&quot;&gt;xx&lt;/a&gt;</code>等方式。</p><p>在<code>location.hash</code>中还有一个重要的东西叫做<code>window.onhashchange</code>，这个东西可以在hash值改变时触发相关函数。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>好了，接下来可以开始实现了，这里使用ES6的class类来实现，当然 使用ES5的proptype也是可以的，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">  <span class="comment">//建立路由表</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.routes = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.hashUrl = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 调用路由下回调函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  route(path, callback) &#123;</span><br><span class="line">    <span class="keyword">this</span>.routes[path] = callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 状态刷新机制</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  updateView() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hashUrl = location.hash.slice(<span class="number">1</span>) || <span class="string">'/'</span>;</span><br><span class="line">    <span class="keyword">this</span>.routes[<span class="keyword">this</span>.hashUrl] &amp;&amp; <span class="keyword">this</span>.routes[<span class="keyword">this</span>.hashUrl]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化路由，在路由改变时启动状态刷新机制</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.updateView.bind(<span class="keyword">this</span>), <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.updateView.bind(<span class="keyword">this</span>), <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然，根据自身需求可以丰富这个最基本的路由，比如博主会在hash路由里新建search query。<br>所以在hashUrl里对<code>location.hash</code>中<code>?</code>及其后面的字符进行了截取。而获取search query是写在了外部函数中，未来也要弄进class里来。</p><p>路由的功能有多大，完全取决于你的想象力，<br>你甚至可以根据页面文字的hash值（注意不是url的hash值）实现一个类似React-Router 2中<code>?_k=xxxxxx</code>的历史标签</p><p>之前说过，用ES5的prototype也是可以的<br>（PS: 当然博主选择了比较粗暴的方式=&gt; babel，根据大家自己的喜好选择顺手的方式就好啦）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Router</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.routes = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.hashUrl = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Router.prototype = &#123;</span><br><span class="line"></span><br><span class="line">    route: <span class="function"><span class="keyword">function</span> (<span class="params">path, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routes[path] = callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    updateView: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hashUrl = location.hash.slice(<span class="number">1</span>) || <span class="string">'/'</span>;</span><br><span class="line">        <span class="keyword">this</span>.routes[<span class="keyword">this</span>.hashUrl] &amp;&amp; <span class="keyword">this</span>.routes[<span class="keyword">this</span>.hashUrl]();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.updateView.bind(<span class="keyword">this</span>), <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.updateView.bind(<span class="keyword">this</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，基本原理弄清楚后，就可以开始编写路由了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.init();</span><br><span class="line"></span><br><span class="line">router.route(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (location.hash.length == <span class="number">0</span>) &#123;</span><br><span class="line">        location.hash = <span class="string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = <span class="string">'Home'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.route(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = <span class="string">'About'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.route(<span class="string">'/links'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = <span class="string">'Links'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="为什么使用hash路由"><a href="#为什么使用hash路由" class="headerlink" title="为什么使用hash路由"></a>为什么使用hash路由</h2><p>hash路由有很多优点</p><ol><li>快，代码是在网页载入时就已经下载，只有切换时才调用，如果你每个router都要发起大量的ajax或者fetch请求的话，让你的服务器运维把http2的connect时间开大点，用户体验极好</li><li>兼容性很好</li></ol><p>当然缺点也有</p><ol><li>爬虫体验极差，不是说不能爬，你的爬虫得学会理解并执行js。谷歌bot在爬取hash路由的网页效果也很差，这也是博主为何没有启用自己编写的博客的原因</li><li>与jq混用需谨慎，坑非常多，你可能需要重构大量代码，最好还是与Vanilla.js搭配食用（笑）</li><li>过渡动画不是很好写，感觉有些生硬</li></ol><h2 id="history路由与hash路由"><a href="#history路由与hash路由" class="headerlink" title="history路由与hash路由"></a>history路由与hash路由</h2><p>history路由是根据h5的新api弄出来的东西，使用的是<code>history.pushState</code> 和 <code>history.replaceState</code>来改变状态的，同样history可以用来操纵hash路由，但是通常没人这么做。一般情况下，它直接改变的是pathname，通过对后端的设置来进行rewrite防止404错误，而前端对history及pathname的读取来刷新状态，这样做虽然使url整洁爬虫友好，但是rewrite设置非常麻烦，你的api以及static静态文件要单独设置，很麻烦，这也是我讨厌history路由的原因</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你也许会在很多网站上看到他们的链接都是&lt;code&gt;http://example.com/#/xxx&lt;/code&gt;的形式，而且加载速度非常快。如果你是React/vue/ng的开发者，那你应该也对这个东西非常熟悉。今天就分析一下hash路由的原理。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回顾2017展望2018</title>
    <link href="https://www.yuyanlab.com/post/2018/"/>
    <id>https://www.yuyanlab.com/post/2018/</id>
    <published>2017-12-31T14:57:00.000Z</published>
    <updated>2018-05-02T11:09:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>恩，这好像是博客的第二次发布年终总结，明天角标就变成2015-2018啦<br><a id="more"></a><br>3月份的时候，我入了LO坑，从此，人生的轨迹发生了一些改变。通过这个圈子，我认识了很多好朋友，包括一位交心的朋友，很开心。在这里我感受到了包容和幸福。这样浑浑噩噩就到了暑假。</p><p>6月份的在线换届中，我被选(qin)上(ding)成了湖工大在线的二把手。压力山大，一个技术部光杆司令顶着压力，手撸了三个招新网站，和上线了论坛。还和icann斗智斗勇扯皮域名的事情。</p><p>7月份开始的暑假，在昆明依然可以穿长袖，逃离了武汉酷暑的我，暗自庆幸。在不25天的时间里，我拿到了我的驾照，此后的每个周末，基本就是哄着油门出门旅游。</p><p>9月份，大二的第一个学期开始了，暗暗发誓要好好学习的我再一次食言了（课那么多怎么好好学习，啊喂）。<br>开始的这个学期里，对express.js和react.js用的比较熟悉了，开始尝试写原生JavaScript，尝试造一些自己的js库。<br>尝试了GO语言，但也只是像大一学c那些功能实现了一下，go的web开发还差得很远。</p><p>10月份，组织在线新一波的人进行微信小程序开发，有两个新来的大佬非常给力，爬虫什么的后端迅速完成了，可是前端界面和功能开发特别头大。而且如去年我刚加入在线一样，人越走越少，管理学这门学问，难啊难。</p><p>12月份，投出去的第一份简历凉凉，总想通过实战来训练自己，果然还是得再提升自己的姿势水平，短学期加了老师的小项目看看能不能学到些东西或者进实验室，直到现在依然没有回复。</p><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><p>未来是人工智能机器学习的时代，虽然我非常讨厌各种噱头，因为我们普通的学生，是难以接触到机器学习的核心的，至少数学功底是远远不够的，代码思想更是差得远。但是不考虑其核心内容，如何使用“机器学习框架”，来处理我们的数据，是我们应该关注的一个问题。</p><p>以后的课越来越少了，课余时间，更想把它安排到</p><ol><li>对JavaScript原生开发的关注点上，尝试实现一个MVVM框架，在这个过程中，我坚信可以学到很多东西。尽管这是一个比较困难的目标。</li><li>尝试参与实战开发，尝试参加GSOC，不知道能不能加入，如果不能，尝试去武汉地区的小公司找实习工作。</li><li>对于英语的学习加强，无论是为了毕业证，还是为了未来是否有肉翻的机会。</li></ol><p>好了，这是短期目标，一个人的命运啊，既要靠自我的奋斗，也要考虑历史的进程（X) 。2017年，看到了很多不稳定的因素，总之闷声发大财。30岁以前努力朝着肉翻的目标实现就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;恩，这好像是博客的第二次发布年终总结，明天角标就变成2015-2018啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初次尝试WebAssembly</title>
    <link href="https://www.yuyanlab.com/post/try-to-using-webassembly/"/>
    <id>https://www.yuyanlab.com/post/try-to-using-webassembly/</id>
    <published>2017-12-23T11:39:00.000Z</published>
    <updated>2018-05-02T10:59:00.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先，什么是WebAssembly？"><a href="#首先，什么是WebAssembly？" class="headerlink" title="首先，什么是WebAssembly？"></a>首先，什么是WebAssembly？</h3><p>根据维基百科上面的解释：WebAssembly或称wasm是一个实验性的低级编程语言，应用于浏览器内的客户端。WebAssembly是便携式的抽象语法树，被设计来提供比JavaScript更快速的编译及运行。WebAssembly将让开发者能运用自己熟悉的编程语言（目前主要是C/C++）编译，再藉JavaScript引擎在浏览器内运行。</p><p><a href="http://webassembly.org/" target="_blank" rel="noopener">http://webassembly.org/</a></p><p>按照博主的理解，WebAssembly应该是种可以被浏览器运行的二进制程序。嗯<br><a id="more"></a></p><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>根据WebAssembly官方的说明，其实就只用安装一个叫emcc的编译器就可以编译了，但是他们也推出了emsdk这个工具，博主感觉还是不错的东西。<br>具体可以看官方的<a href="http://webassembly.org/getting-started/developers-guide/" target="_blank" rel="noopener">Getting Started</a><br>安装结束后就可以开始开发了。</p><p>WebAssembly的可执行文件后缀名为<code>.wasm</code>但是就目前的情况来说，必须由js来调用程序。</p><p>所以当前WebAssembly的调用思路博主认为是这样的：js发起http请求拉取wasm文件，然后用创建WebAssembly实例(其中涉及内存分配等等问题)，将文件载入到实例中，然后导出函数接口，最后调用函数。</p><h5 id="编译出你的wasm二进制文件"><a href="#编译出你的wasm二进制文件" class="headerlink" title="编译出你的wasm二进制文件"></a>编译出你的wasm二进制文件</h5><p>根据官方推荐的sdk构建方式进行构建: <a href="http://webassembly.org/getting-started/developers-guide/" target="_blank" rel="noopener">http://webassembly.org/getting-started/developers-guide/</a></p><p>但是，官方推荐使用的<code>emcc hello.c -s WASM=1 -o hello.html</code>博主不推荐使用，这会生成一堆无用的文件，而且生成的这个hello.html也无法运行。</p><p>所以博主通常使用这个<code>emcc hello.c -Os -s WASM=1 -s SIDE_MODULE=1 -o hello.wasm</code>来构建。<br>这样我们得到的就是干干净净的wasm。</p><h5 id="网页中拉取你的wasm程序"><a href="#网页中拉取你的wasm程序" class="headerlink" title="网页中拉取你的wasm程序"></a>网页中拉取你的wasm程序</h5><p>博主推荐<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API" target="_blank" rel="noopener">MDN</a>提供的思路实现。</p><p>这是博主使用的调用代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadWebAssembly</span>(<span class="params">filename, imports = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(filename)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.arrayBuffer())</span><br><span class="line">    .then(<span class="function"><span class="params">buffer</span> =&gt;</span> WebAssembly.compile(buffer))</span><br><span class="line">    .then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">      imports.env = imports.env || &#123;&#125;</span><br><span class="line">      <span class="built_in">Object</span>.assign(imports.env, &#123;</span><br><span class="line">        memoryBase: <span class="number">0</span>,</span><br><span class="line">        tableBase: <span class="number">0</span>,</span><br><span class="line">        memory: <span class="keyword">new</span> WebAssembly.Memory(&#123;</span><br><span class="line">          initial: <span class="number">256</span>,</span><br><span class="line">          maximum: <span class="number">256</span></span><br><span class="line">        &#125;),</span><br><span class="line">        table: <span class="keyword">new</span> WebAssembly.Table(&#123;</span><br><span class="line">          initial: <span class="number">0</span>,</span><br><span class="line">          maximum: <span class="number">0</span>,</span><br><span class="line">          element: <span class="string">'anyfunc'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> WebAssembly.Instance(<span class="built_in">module</span>, imports)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadWebAssembly(<span class="string">'example.wasm'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> example = instance.exports._example;</span><br><span class="line">    example(<span class="number">100</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>就目前而言，wasm调用还是非常复杂的。</p><h5 id="关于它与asm-js和wast。"><a href="#关于它与asm-js和wast。" class="headerlink" title="关于它与asm.js和wast。"></a>关于它与asm.js和wast。</h5><p>asm.js是cpp编译至wasm的一个中间步骤，博主更推荐使用asm.js。wast具体是干什么的不太清楚，更像是人能读懂的伪程序？</p><h3 id="关于其他的一些坑"><a href="#关于其他的一些坑" class="headerlink" title="关于其他的一些坑"></a>关于其他的一些坑</h3><p>博主一直无法实现字符串的操作。也就是目前博主，只实现了整型数据的传入返回。<br>这是一些有意思的现象：</p><ol><li>long long在其中也是不被支持</li><li>time.h 内的很多东西不被支持</li><li>编译器对c++的兼容性比c差</li></ol><p>JavaScript本身作为一种弱类型的语言，和c语言对接的时候，强制类型转换本身就是一个大坑。</p><p>所以，WebAssembly到底适合什么样的使用场景？</p><ol><li>适合进行复杂算法的执行，而且直接封装。数据丢进去，然后出结果，效率是比原生js要好</li><li>安全性较高的数据处理，比如某种加密算法，原始数据传入后，经过黑盒直接出结果。但是安全性目前还没看到可行性验证。</li><li>webGL游戏</li></ol><p>作为其他常用的操作，还是老老实实的写js吧，就目前来说，这东西使用成本很高的，坑非常多。而且优质文章资源非常少，版本API革新非常快</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先，什么是WebAssembly？&quot;&gt;&lt;a href=&quot;#首先，什么是WebAssembly？&quot; class=&quot;headerlink&quot; title=&quot;首先，什么是WebAssembly？&quot;&gt;&lt;/a&gt;首先，什么是WebAssembly？&lt;/h3&gt;&lt;p&gt;根据维基百科上面的解释：WebAssembly或称wasm是一个实验性的低级编程语言，应用于浏览器内的客户端。WebAssembly是便携式的抽象语法树，被设计来提供比JavaScript更快速的编译及运行。WebAssembly将让开发者能运用自己熟悉的编程语言（目前主要是C/C++）编译，再藉JavaScript引擎在浏览器内运行。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://webassembly.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://webassembly.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;按照博主的理解，WebAssembly应该是种可以被浏览器运行的二进制程序。嗯&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用React，GithubAPI，Hexo，Travis-CI构建一个属于自己的博客</title>
    <link href="https://www.yuyanlab.com/post/react-hexo-blog/"/>
    <id>https://www.yuyanlab.com/post/react-hexo-blog/</id>
    <published>2017-11-08T13:34:00.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>的确现在的博客就是基于这个思路打造的。纯粹的restful+单页应用的风格。</p><p>首先的Hexo部分，hexo本来是通过生成一个个目录的然后加入index.html实现的文章路径，得益于“hexo-generator-json-content”这个插件，它可以把所有文章信息，构造为一个json。这个json后面上传到github上便成为了最主要的api。</p><p>至于原来的目录，出于seo优化的需要，我们在<code>page.ejs</code>等模板上做一个重定向<code>/post/postname</code> -&gt;<code>/#!/post/postname</code></p><p>Travis-CI方面，主要是根据GihubAPI的特点，满足我们懒人的需要，只需要朝gitpage的一个分支上上传markdown，Travis-CI就会给我们自动部署发布到主分支上。我们hexo生成上传的东西也需要做些优化，毕竟，我们要的只是那个<code>content.json</code>和其他一些东西。</p><p>Github方面，不说了，就提供文件储存还有API。</p><p>关于React，接下来继续说</p><a id="more"></a><hr><p>React的路由，我规划了如下路由</p><ul><li><code>/article/:Id</code>我们不可能把所有文章和他们的节选全部放一个页面里，这样访问体验极差。所以我们需要个文章列表分页功能。</li><li><code>/post/:post</code>文章内容</li><li><code>/page/:staticPage</code>一些关于，友情链接等等的页面</li><li><code>/</code>首页就直接跳转至<code>/article/1</code></li></ul><p>样式你可以选择各种各样的前端框架，不过请注意不要选择是使用jQuery操作DOM的框架。</p><h5 id="article页面"><a href="#article页面" class="headerlink" title="article页面"></a>article页面</h5><p>由于React-Router4的传值操作体验极差，所以博主并没有使用它提供的api，而是使用了原生的方式来获取id值（PS：在web开发上博主非常建议使用React-Router2，RN可能还是4比较好）<br>在提取到id值后，我们统计一下文章数，并计算出5文章一页需要多少页面可以把文章塞完。然后将content.json遍历一遍，曲线救国按顺序再构造出当页的结构。最后存入state给render渲染</p><h5 id="post和staticPage"><a href="#post和staticPage" class="headerlink" title="post和staticPage"></a>post和staticPage</h5><p>理由同上，原生获取id，然后发起fetch请求抓取github的api，获得json和content数据，github的markdown比较特殊，进行了非标准的base64加密，我们需要多次转码，并使用正则替代来同时兼容hexo能读取的markdown<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob(str)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAsyncPostMarkdown</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">`https://api.github.com/repos/<span class="subst">$&#123;GITHUBNAME&#125;</span>/<span class="subst">$&#123;GITHUBREPO&#125;</span>/contents/source/_posts/<span class="subst">$&#123;path&#125;</span>.md?ref=master`</span>);  </span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line">fetchAsyncPostMarkdown()</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> Content = marked(b64_to_utf8(utf8_to_b64(b64_to_utf8(data.content))).replace(<span class="regexp">/---\ntitle:/g</span>,<span class="string">'### '</span>).replace(<span class="regexp">/date:/g</span>,<span class="string">'\n##### '</span>))  </span><br><span class="line">;&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">reason</span> =&gt;</span> <span class="built_in">console</span>.log(reason.message))</span><br></pre></td></tr></table></figure></p><p>其他的也就加了些工具库。</p><p>感受就是，状态数据管理很重要，好好看文档orz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;的确现在的博客就是基于这个思路打造的。纯粹的restful+单页应用的风格。&lt;/p&gt;
&lt;p&gt;首先的Hexo部分，hexo本来是通过生成一个个目录的然后加入index.html实现的文章路径，得益于“hexo-generator-json-content”这个插件，它可以把所有文章信息，构造为一个json。这个json后面上传到github上便成为了最主要的api。&lt;/p&gt;
&lt;p&gt;至于原来的目录，出于seo优化的需要，我们在&lt;code&gt;page.ejs&lt;/code&gt;等模板上做一个重定向&lt;code&gt;/post/postname&lt;/code&gt; -&amp;gt;&lt;code&gt;/#!/post/postname&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Travis-CI方面，主要是根据GihubAPI的特点，满足我们懒人的需要，只需要朝gitpage的一个分支上上传markdown，Travis-CI就会给我们自动部署发布到主分支上。我们hexo生成上传的东西也需要做些优化，毕竟，我们要的只是那个&lt;code&gt;content.json&lt;/code&gt;和其他一些东西。&lt;/p&gt;
&lt;p&gt;Github方面，不说了，就提供文件储存还有API。&lt;/p&gt;
&lt;p&gt;关于React，接下来继续说&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>好久没有写博客了，来叙叙最近吧</title>
    <link href="https://www.yuyanlab.com/post/newblog/"/>
    <id>https://www.yuyanlab.com/post/newblog/</id>
    <published>2017-11-08T06:41:00.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近踩了很多坑，然后用React 15，通过travis-ci来hexo生成一些json，结合github的api一起造了这个博客。<br>踩了很多的坑。以后慢慢在博客中叙述叙述记叙出来吧。</p><p>大学生活也是一言难尽，总之，我回来了<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近踩了很多坑，然后用React 15，通过travis-ci来hexo生成一些json，结合github的api一起造了这个博客。&lt;br&gt;踩了很多的坑。以后慢慢在博客中叙述叙述记叙出来吧。&lt;/p&gt;
&lt;p&gt;大学生活也是一言难尽，总之，我回来了&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx+FCGI编译安装+TCL/C++/shell的学习/安装调教</title>
    <link href="https://www.yuyanlab.com/post/fcgi/"/>
    <id>https://www.yuyanlab.com/post/fcgi/</id>
    <published>2017-07-01T15:32:15.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>FCGI虽然是上个世纪的东西，但是缺了还真不行。在FCGI的编译安装方面Google都无法找到相关笔记文档。在经历了一下午的折磨后，才安装上了。我觉得应该写成笔记，帮助更多人少走弯路。</p><p>FCGI存在与epel和Ubuntu等源里，因此，大多数设备都能无痛安装。</p><p>但由于我的是CentOS armv7版的操作系统，不可能使用epel源，由于FCGI缺乏维护，所以在编译过程中，走了很多弯路。</p><p>nginx的安装查看我的上一篇博客的nginx安装部分即可。</p><p>首先我们来搞清楚一下，CGI相关的原理，如何编写相关脚本，以及使用这套组合的意义。</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h3><p>通用网关接口（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI描述了服务器和请求处理程序之间传输数据的一种标准。CGI 独立于任何语言的，CGI 程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。（Wikipedia）<br>所以理论上，任何可以使用终端命令行运行的程序都能通过一定改动来支援cgi。</p><p>我们很少看到直接的cgi，那是因为更多的web服务器软件都使用了一种更先进的cgi技术-FastCGI。<br>注意，这里是FastCGI只是作为一个扩展依赖，相当于开放了接口，是一种被动型的，并不能直接操纵。另外安装时需要加上参数编译进去。</p><h5 id="安装FCGI"><a href="#安装FCGI" class="headerlink" title="安装FCGI"></a>安装FCGI</h5><p>快速通用网关接口（Fast Common Gateway Interface／FastCGI）是通用网关接口（CGI）的改进，描述了客户端和服务器程序之间传输数据的一种标准。FastCGI致力于减少Web服务器与CGI程式之间互动的开销，从而使服务器可以同时处理更多的Web请求。与为每个请求创建一个新的进程不同，FastCGI使用持续的进程来处理一连串的请求（Wikipedia）</p><p>请注意，这里的FCGI不同于perl-fcgi，php-cgi，这是一套完整的fcgi能够支援各种语言的FCGI及其cgi开发工具库。其对应的epel名称为fcgi-devel。</p><p>由于FCGI已经倒闭，所以你从各种博客上找到的教程叫你去官网下是不可能的。</p><p>但是，github上有份镜像下来的fastcgi官网镜像，尽管里面的源代码非常混乱，编译各种warning，但是好歹有了。这个一个是方便我们编写c/cpp的cgi程序，另外一个fcgiwrap也是依赖这个工具库的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install autoconf automake libtool</span><br><span class="line">wget https://github.com/FastCGI-Archives/FastCGI.com/raw/master/original_snapshot/fcgi-2.4.1-SNAP-0910052249.tar.gz</span><br><span class="line">tar xvfz fcgi-2.4.1-SNAP-0910052249.tar.gz</span><br><span class="line"><span class="built_in">cd</span> fcgi-2.4.1-SNAP-0910052249</span><br></pre></td></tr></table></figure></p><p>然后你需要修改<code>./include/fcgio.h</code>，在里面加入<code>#include &lt;cstdio&gt;</code>，这里是源代码的相关bug</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/fcgi</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用"><a href="#下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用" class="headerlink" title="下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用"></a>下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/fcgi/lib/libfcgi.so.0 /usr/lib/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/fcgi/lib/libfcgi.so /usr/lib/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/fcgi/lib/libfcgi.so.0.0.0 /usr/lib/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/fcgi/include/*.h /usr/include/</span><br></pre></td></tr></table></figure><p>如果你需要c++相关的编译，也需要连接libfcgi++.so相关。</p><h5 id="安装FCGI相关扩展"><a href="#安装FCGI相关扩展" class="headerlink" title="安装FCGI相关扩展"></a>安装FCGI相关扩展</h5><p>为了能支持大部分脚本，我们需要安装fcgiwrap这个库。这个库安装依赖上面的FCGI开发套件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/gnosek/fcgiwrap.git</span><br><span class="line">cd fcgiwrap</span><br><span class="line">autoreconf -i</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">ln -s fcgiwrap /usr/local/bin/</span><br></pre></td></tr></table></figure></p><p>为了方便 操纵fcgiwrap，我们建立fcgiwrap的管理启动脚本<code>nano /etc/init.d/fcgiwrap</code><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings <span class="string">FATAL =&gt;</span> <span class="string">qw( all )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> IO::Socket::UNIX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $bin_path = <span class="string">'/usr/local/bin/fcgiwrap'</span>;</span><br><span class="line"><span class="keyword">my</span> $socket_path = $ARGV[<span class="number">0</span>] || <span class="string">'/tmp/cgi.sock'</span>;</span><br><span class="line"><span class="keyword">my</span> $num_children = $ARGV[<span class="number">1</span>] || <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">close</span> STDIN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unlink</span> $socket_path;</span><br><span class="line"><span class="keyword">my</span> $socket = IO::Socket::UNIX-&gt;new(</span><br><span class="line">    <span class="string">Local =&gt;</span> $socket_path,</span><br><span class="line">    <span class="string">Listen =&gt;</span> <span class="number">100</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span> <span class="string">"Cannot create socket at $socket_path: $!\n"</span> <span class="keyword">unless</span> $socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="number">1</span> .. $num_children) &#123;</span><br><span class="line">    <span class="keyword">my</span> $pid = <span class="keyword">fork</span>;</span><br><span class="line">    <span class="keyword">die</span> <span class="string">"Cannot fork: $!"</span> <span class="keyword">unless</span> <span class="keyword">defined</span> $pid;</span><br><span class="line">    <span class="keyword">next</span> <span class="keyword">if</span> $pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exec</span> $bin_path;</span><br><span class="line">    <span class="keyword">die</span> <span class="string">"Failed to exec $bin_path: $!\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="安装FCGI管理器"><a href="#安装FCGI管理器" class="headerlink" title="安装FCGI管理器"></a>安装FCGI管理器</h5><p>在之前我们说了，nginx等软件知识被动接受FastCGI接口，所以，我们需要spawn-fcgi这个进程管理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.lighttpd.net/spawn-fcgi/releases-1.6.x/spawn-fcgi-1.6.4.tar.gz</span><br><span class="line">tar -zxvf spawn-fcgi-1.6.4.tar.gz</span><br><span class="line">cd spawn-fcgi-1.6.4</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>执行<code>spawn-fcgi --help</code>验证安装情况，具体如何用过会儿再讲。</p><hr><h3 id="CGI程序的编写，这里有几个不同语言的示例。"><a href="#CGI程序的编写，这里有几个不同语言的示例。" class="headerlink" title="CGI程序的编写，这里有几个不同语言的示例。"></a>CGI程序的编写，这里有几个不同语言的示例。</h3><p>建议创建<code>/var/www/cgi/cgi-bin</code>目录，把写好的cgi脚本都放里面。<br>另外赋予相关权限<code>chown -R nginx:nginx /var/www/cgi-bin</code></p><h5 id="tcl语言"><a href="#tcl语言" class="headerlink" title="tcl语言"></a>tcl语言</h5><p>Tcl（发音tickle）是一种脚本语言。由John Ousterhout创建。TCL经常被用于快速原型开发 RAD、脚本编程、GUI编程和测试等方面。（Wikipedia）</p><p>这是测试的最好一种语言了，我们创建<code>test-tcl.cgi</code><br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/tclsh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span>  <span class="string">"Content-type: text/html"</span></span><br><span class="line"><span class="keyword">puts</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">puts</span>  <span class="string">"This is a tcl cgi test script"</span></span><br></pre></td></tr></table></figure></p><h5 id="bash脚本"><a href="#bash脚本" class="headerlink" title="bash脚本"></a>bash脚本</h5><p>我们创建<code>test-bash.cgi</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;html&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;title&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"cgi test\n"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/title&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;body&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"&lt;p&gt; This is a bash cgi test script&lt;/p&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/body&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/html&gt;"</span></span><br></pre></td></tr></table></figure></p><h5 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h5><p>我们创建 <code>test-c.cpp</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcgi_stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (FCGI_Accept() &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Content-type: text/html\r\n"</span></span><br><span class="line">        <span class="string">"\r\n"</span></span><br><span class="line">        <span class="string">"&lt;title&gt;FastCGI Hello!&lt;/title&gt;"</span></span><br><span class="line">        <span class="string">"&lt;h1&gt;FastCGI Hello!&lt;/h1&gt;"</span></span><br><span class="line">        <span class="string">"Request number %d running on host &lt;i&gt;%s&lt;/i&gt;\n"</span>,</span><br><span class="line">        ++count, getenv(<span class="string">"SERVER_NAME"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后<code>g++ test-c.cpp -o test-c.cgi –lfcgi</code>来编译你的c语言的cgi程序。</p><h5 id="perl语言测试"><a href="#perl语言测试" class="headerlink" title="perl语言测试"></a>perl语言测试</h5><p>我们创建 <code>test-perl.cgi</code><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;cgi test&lt;/title&gt;&lt;/head&gt;\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"&lt;body&gt;&lt;p&gt;This is a bash cgi test script&lt;p&gt;&lt;/body&gt;&lt;/html&gt;\n"</span>;</span><br></pre></td></tr></table></figure></p><hr><h3 id="启动cgi工具以及nginx相关配置"><a href="#启动cgi工具以及nginx相关配置" class="headerlink" title="启动cgi工具以及nginx相关配置"></a>启动cgi工具以及nginx相关配置</h3><p>使用spawn-fcgi来启动fcgiwrap。<br>当然，你也可以使用spawn-fcgi单独启动一个可执行的cgi程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cgi交给fcgiwrap托管</span></span><br><span class="line">spawn-fcgi -f /usr/<span class="built_in">local</span>/sbin/fcgiwrap -p 5000</span><br><span class="line"><span class="comment">#单独启动单个cgi程序</span></span><br><span class="line">spawn-fcgi -a 127.0.0.1 -p 5000 -f /var/www/cgi/cgi-bin/<span class="built_in">test</span>-c.cgi</span><br></pre></td></tr></table></figure></p><p>在nginx的配置 比如，匹配所有cgi后缀<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.cgi$</span> &#123;</span><br><span class="line">  <span class="attribute">root</span> /var/www/cgi/;</span><br><span class="line">  <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:5000</span>;</span><br><span class="line">  <span class="attribute">fastcgi_index</span> index.cgi;</span><br><span class="line">  <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>又比如，cgi-bin文件夹交个cgi处理<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /cgi-bin/ &#123;</span><br><span class="line">  <span class="attribute">root</span> /var/www/cgi/;</span><br><span class="line">  <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:5000</span>;</span><br><span class="line">  <span class="attribute">fastcgi_index</span> index.cgi;</span><br><span class="line">  <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个样更适用于c和cpp编写的cgi应用</p><hr><hr><h3 id="为什么使用这套组合。"><a href="#为什么使用这套组合。" class="headerlink" title="为什么使用这套组合。"></a>为什么使用这套组合。</h3><p>首先，这次实验的设备是armv7单片机，所以才会编译得吐血。<br>尽管FastCGI开销不小，但是在单片机这样的使用的场景下，效率绝对是比nginx+mysql/sqlite+php/node.js的效率要高很多的，特别是我们使用bash或者c语言来作为cgi相应的话，效率非常高。<br>另外，我们如果操作GPIO针脚，使用c语言，无论是易用性还是效率性能都要大大高于python的。</p><p>但是，本套配置文件在cgi响应请求方面还是有些问题，估计是nginx配置的锅，我也会继续折腾研究的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FCGI虽然是上个世纪的东西，但是缺了还真不行。在FCGI的编译安装方面Google都无法找到相关笔记文档。在经历了一下午的折磨后，才安装上了。我觉得应该写成笔记，帮助更多人少走弯路。&lt;/p&gt;
&lt;p&gt;FCGI存在与epel和Ubuntu等源里，因此，大多数设备都能无痛安装。&lt;/p&gt;
&lt;p&gt;但由于我的是CentOS armv7版的操作系统，不可能使用epel源，由于FCGI缺乏维护，所以在编译过程中，走了很多弯路。&lt;/p&gt;
&lt;p&gt;nginx的安装查看我的上一篇博客的nginx安装部分即可。&lt;/p&gt;
&lt;p&gt;首先我们来搞清楚一下，CGI相关的原理，如何编写相关脚本，以及使用这套组合的意义。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kali在树莓派上的调教笔记</title>
    <link href="https://www.yuyanlab.com/post/Kali-raspberry/"/>
    <id>https://www.yuyanlab.com/post/Kali-raspberry/</id>
    <published>2017-06-25T15:57:00.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个偶然的时刻，我发现某个地方的IP是开放80和443端口的，那如果不好好利用一下简直太可惜了。当然，人家可是良民，当然会遵守国家的法律法规啦，那废话就不多说了。</p><p>小插曲：好久不用raspbian了，刷好镜像通电后才知道raspbian已经在一年前就已经默认关闭了ssh，没ssh那玩个鬼。</p><p>索性放弃raspbian，那么目前有Ubuntu Mate，Kali OS，Arch Linux三个系统供我选择，Ubuntu Mate也是需要通过显示器设定，故放弃；Arch Linux arm安装需要用到linux的机子；所以选择了Kali OS。<br><a id="more"></a><br>这是Kali的安装指导页面<a href="https://docs.kali.org/introduction/download-official-kali-linux-images" target="_blank" rel="noopener">https://docs.kali.org/introduction/download-official-kali-linux-images</a>里面包括了自定义构建镜像的方法和已构建好的镜像的下载链接。<br>也可以直接从这个页面寻获下载链接<a href="https://www.offensive-security.com/kali-linux-arm-images/" target="_blank" rel="noopener">https://www.offensive-security.com/kali-linux-arm-images/</a></p><p>接下啦是刻录的方式，我的本子是OS X的系统，所以我写的是该系统的烧录方式</p><ol><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://images.offensive-security.com/arm-images/kali-2017.01-rpi2.img.xz</span><br><span class="line">unxz kali-2017.01-rpi2.img.xz</span><br><span class="line">mv kali-2017.01-rpi2.img ~/</span><br></pre></td></tr></table></figure></li><li><p>打开OS X的自带的磁盘工具，将tf卡格式化成MS-DOS(FAT)格式的。</p></li><li>用<code>df -h</code>命令找到你的tf卡的挂在地址.</li><li>假设我的是<code>/dev/disk2s1</code>，就执行<code>diskutil unmount /dev/disk2s1</code>，以此类推。</li><li>执行<code>diskutil list</code>来找到tf卡，假设我返回来的是<code>/dev/disk2</code></li><li>使用dd命令来刻录<code>sudo dd bs=4m if=kali-2017.01-rpi2.img of=/dev/rdisk2</code>，注意of后指向的disk要加上r。刻录时间稍长，多等等。最后会打印record和transferred信息的。</li><li>最后<code>diskutil unmountDisk /dev/disk2</code>来推出设备，就可以插上树莓派了。</li></ol><p>这时，把树莓派接上网线。登入你的路由器控制面板。有以下几件事需要做</p><ol><li>打开客户端列表，查看主机名为kali设备的内网IP地址和MAC地址</li><li>打开保留列表，将记录下来的内网IP和MAC地址绑定</li><li>打开端口转发列表，将80和443或者其他端口转发至内网IP，协议默认即可，也可指定。</li><li>如果路由器自带ddns服务的话，也可以设定。</li></ol><p>好了，这个时候，我们可以登入Kali了，官方打包的系统，默认使用root用户。密码toor。登入后修改密码。</p><p>第一步先换源，树莓派版本的Kali是基于kali-rolling构建的，所以我们在修改软件源时要务必注意和检查<br>比如清华tuna源，在<code>https://mirrors.tuna.tsinghua.edu.cn/kali/dists/</code>里有<code>kali-rolling</code>所以理论上是可以用这个源的（当然的确是可以用的）<br>编辑镜像源列表<code>nano /etc/apt/sources.list</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure></p><p>刷新一下<code>apt-get update</code></p><p>接下来是安装nginx的部分，由于对树莓派操纵数据库的阴影，(可以查看本博客最早的那些文章)所以不打算安装数据库，我不会写php，所以也没必要安装php。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y unzip curl build-essential make gcc libpcre3 libpcre3-dev libpcre++-dev zlib1g-dev libbz2-dev libxslt1-dev libxml2-dev libgd2-xpm-dev libgeoip-dev libgoogle-perftools-dev libperl-dev libssl-dev</span><br><span class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.0.2l.tar.gz</span><br><span class="line">wget http://nginx.org/download/nginx-1.12.0.tar.gz</span><br><span class="line">tar -zxvf openssl-1.0.2l.tar.gz</span><br><span class="line">tar -zxvf nginx-1.12.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.12.0</span><br><span class="line"></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/etc/nginx                                                \</span><br><span class="line">--sbin-path=/usr/sbin/nginx                                        \</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf                                  \</span><br><span class="line">--error-log-path=/var/<span class="built_in">log</span>/nginx/error.log                          \</span><br><span class="line">--http-log-path=/var/<span class="built_in">log</span>/nginx/access.log                          \</span><br><span class="line">--pid-path=/var/run/nginx.pid                                      \</span><br><span class="line">--lock-path=/var/run/nginx.lock                                    \</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp          \</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp                 \</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp             \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp                 \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp                   \</span><br><span class="line">--user=nginx                                                       \</span><br><span class="line">--group=nginx                                                      \</span><br><span class="line">--with-openssl=../openssl-1.0.2l                                   \</span><br><span class="line">--with-http_ssl_module                                             \</span><br><span class="line">--with-http_realip_module                                          \</span><br><span class="line">--with-http_addition_module                                        \</span><br><span class="line">--with-http_sub_module                                             \</span><br><span class="line">--with-http_dav_module                                             \</span><br><span class="line">--with-http_flv_module                                             \</span><br><span class="line">--with-http_mp4_module                                             \</span><br><span class="line">--with-http_gunzip_module                                          \</span><br><span class="line">--with-http_gzip_static_module                                     \</span><br><span class="line">--with-http_random_index_module                                    \</span><br><span class="line">--with-http_secure_link_module                                     \</span><br><span class="line">--with-http_stub_status_module                                     \</span><br><span class="line">--with-http_auth_request_module                                    \</span><br><span class="line">--with-file-aio                                                    \</span><br><span class="line">--with-http_v2_module                                              \</span><br><span class="line">--with-threads                                                     \</span><br><span class="line">--with-stream                                                      \</span><br><span class="line">--with-stream_ssl_module                                           \</span><br><span class="line">--with-http_slice_module</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">useradd -r nginx</span><br><span class="line">mkdir /var/cache/nginx</span><br><span class="line">touch /var/cache/nginx/client_temp</span><br></pre></td></tr></table></figure><p>这时我们再创建一个systemctl启动脚本<code>nano /lib/systemd/system/nginx.service</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The NGINX HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/sbin/nginx</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>就可以启动<code>systemctl start nginx</code></p><p>接下来，我们去/etc/nginx里编辑脚本就可以啦,博客之前的文章也有。node还没有装，不过后续可能会更新吧。<br><img src="/img/kalirasp.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个偶然的时刻，我发现某个地方的IP是开放80和443端口的，那如果不好好利用一下简直太可惜了。当然，人家可是良民，当然会遵守国家的法律法规啦，那废话就不多说了。&lt;/p&gt;
&lt;p&gt;小插曲：好久不用raspbian了，刷好镜像通电后才知道raspbian已经在一年前就已经默认关闭了ssh，没ssh那玩个鬼。&lt;/p&gt;
&lt;p&gt;索性放弃raspbian，那么目前有Ubuntu Mate，Kali OS，Arch Linux三个系统供我选择，Ubuntu Mate也是需要通过显示器设定，故放弃；Arch Linux arm安装需要用到linux的机子；所以选择了Kali OS。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HBUT 2nd ACM Contest</title>
    <link href="https://www.yuyanlab.com/post/HBUT-2ACM/"/>
    <id>https://www.yuyanlab.com/post/HBUT-2ACM/</id>
    <published>2017-05-28T01:32:15.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>恩，菜鸡和大佬之间的差距不是一天两天能追上的，当然思路正确写不出来是不可原谅的。。。。。。总之，很丢人orz</p><p>虽然都是大部分是水题，但是还是把这部分分享出来吧w</p><p>拿自己的和标程对比，人家的就是写的就是清爽漂亮，哎。。。</p><a id="more"></a><h3 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A:"></a>Problem A:</h3><p>(1s/32768k)</p><p>Lucyma(Lucy 的妈妈)最近很着急，因为Lucy不喜欢吃苹果，但俗话说“每天一苹果，医生远离我”，Lucyma很像让Lucy多吃一点苹果，那怎么办呢？于是Lucyma每天都会按照顺序把水果放到果盘里，如果果盘装满，Lucyma就会将最先放的水果拿出来，以不能浪费粮食的名义，让Lucy吃掉。现在Lucyma一共有n个水果，她想知道这种方法能让lucy最多吃掉几个苹果，你能告诉Lucyma么？</p><h4 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h4><p>第一行是一个整数T，代表数据组数。(0&lt;T&lt;=20)<br>每组输入有两行，第一行是两个整数n，m分别代表水果的个数和果盘的容量，用一个空格隔开(0&lt;n,m&lt;=100000)<br>第二行是一串长度为n的字符串，都是小写字母，其中每个数字都代表一种水果，a代表苹果。</p><h4 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h4><p>对于每组数据，输出一行，一个整数m，代表lucy最多吃掉苹果的个数。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 5</span><br><span class="line">aab</span><br><span class="line">5 3</span><br><span class="line">abasd</span><br></pre></td></tr></table></figure><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h5 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(m&gt;=n) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==<span class="string">'a'</span>)</span><br><span class="line">                    num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;=(n-m)) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-m);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Problem-B"><a href="#Problem-B" class="headerlink" title="Problem B:"></a>Problem B:</h3><p>(1s/32768k)</p><p>Lucy最近迷上了看奥运会，她对运动员不抛弃不放弃，以及追求更高，更快，更强的奥运会精神深深折服。Jason也是个奥运迷，有一天，lucy和jason讨论奥运会举办的时间，lucy认为奥运会是每四年举办一次，jason认为奥运会都是在闰年举办的。lucy知道jason的想法是错的，你能帮助lucy么？（第一界奥运会举办时间是在1896年）</p><h4 id="输入描述：-1"><a href="#输入描述：-1" class="headerlink" title="输入描述："></a>输入描述：</h4><p>输入第一行是一个整数T，代表数据组数。(0&lt;T&lt;=20)<br>每组第一行是一个N，代表年份(0&lt;n&lt;2017)</p><h4 id="输出描述：-1"><a href="#输出描述：-1" class="headerlink" title="输出描述："></a>输出描述：</h4><p>每组输出两行，第一行输出是否为奥运会举办的年份，如果是，输出”YES”,否则输出”NO”。第二行输出是否为闰年，如果是，输出”YES”，否则输出”NO”；</p><h5 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1900</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h5 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ay</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yn</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">100</span>==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">400</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(ay(n)&amp;&amp;n&gt;=<span class="number">1896</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>(yn(n)) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Problem-C"><a href="#Problem-C" class="headerlink" title="Problem C:"></a>Problem C:</h3><p>(1s/32768k)</p><p>Lucy和jason最近刚学了三角形的基本性质，lucy觉得自己学的比jason好，jason不服气了，想考一考lucy，看谁学得更好。于是jason捡来了很多小木棍，问其中能不能找到三根木棍可以组成一个三角形。其实偷偷告诉你lucy学得并不好，但是不能被jason发现了，你能编写个程序来帮lucy回答么？</p><h4 id="输入描述：-2"><a href="#输入描述：-2" class="headerlink" title="输入描述："></a>输入描述：</h4><p>第一行是一个整数T，代表数据数组。(0&lt;T&lt;=20)<br>每组数据有两行，第一行数据是一个整数n，代表木棍的数量。第二行是n个整数，i代表每个木棍的长度。(3&lt;=n&lt;100,0&lt;i&lt;100000)</p><h4 id="输出描述：-2"><a href="#输出描述：-2" class="headerlink" title="输出描述："></a>输出描述：</h4><p>对于每组数据，输出一行，如果有三根木棍可以组成一个三角形，输出”YES”,否则输出”NO”。</p><h5 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">4</span><br><span class="line">1 2 3 4</span><br><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">YES</span><br></pre></td></tr></table></figure><h5 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;n;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((a[i]+a[j])&lt;=a[k]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;=(a[k]-a[j])) <span class="keyword">continue</span>;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Problem-D"><a href="#Problem-D" class="headerlink" title="Problem D:"></a>Problem D:</h3><p>(1s/32768k)</p><p>一天，lucy和jason被传送到了一个从未捡到过的地方，她们唯一要做的事情就是努力活下去。她们惊喜的发现附近有许多可加工的食物。一共有n个食物，使用这些食物可以增加她们的饱和度Yi，但是令人心塞的是，每一种食物都有它相应的时间Xi。如果加工时间未达到，增加的饱食度与它可以增加的最大饱食度的比例和它的实际加工时间占需要加工时间的比例一致。例如 胡萝卜本来可以增加饱食度10，需要加工的时间为2，如果加工时间为1，就只能增加饱食度5了。而且她们的时间是宝贵的，只能有k时间用来加工食物，请问她们加工这些食物之后能增加的最大的饱食度是多少呢？</p><h4 id="输入描述：-3"><a href="#输入描述：-3" class="headerlink" title="输入描述："></a>输入描述：</h4><p>第一个数字为T，表示样例总数。(0&lt;T&lt;=100)<br>每个样例的第一行输入为两个整数n和k。(0&lt;n&lt;=1000,0&lt;k&lt;=1000)<br>每个样例第二行为n个整数，第i个数字表示第i种食物的加工时间Xi。(0&lt;Xi&lt;=100)<br>每个样例的第三行为n个整数，第i个数字表示第i种食物可以增加的最大饱食度Yi(0&lt;Yi&lt;100)</p><h4 id="输出描述：-3"><a href="#输出描述：-3" class="headerlink" title="输出描述："></a>输出描述：</h4><p>每个样例输出一个数字。每个数字占一行，表示lucy和jason最多能增加的饱食度，保留两位小数。</p><h5 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 2</span><br><span class="line">1 1 2</span><br><span class="line">10 10 5</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20.00</span><br></pre></td></tr></table></figure><h5 id="AC-Code-3"><a href="#AC-Code-3" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">food</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ti,d;</span><br><span class="line">    food(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><br><span class="line">    &#123;   ti = a; d = b;  &#125;</span><br><span class="line">    food()&#123;&#125;</span><br><span class="line">&#125;data[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(food a, food b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = (<span class="keyword">double</span>)a.d/a.ti,y = (<span class="keyword">double</span>)b.d/b.ti;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> kase;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">datamake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    kase = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kase);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(kase--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n = rand()%<span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = rand()%<span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> casei = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">            i == <span class="number">0</span> ? <span class="built_in">printf</span>(<span class="string">"%d"</span>,casei) : <span class="built_in">printf</span>(<span class="string">" %d"</span>,casei);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> casei = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">            i == <span class="number">0</span> ? <span class="built_in">printf</span>(<span class="string">"%d"</span>,casei) : <span class="built_in">printf</span>(<span class="string">" %d"</span>,casei);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;kase);</span><br><span class="line">    <span class="keyword">while</span>(kase--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i].ti);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i].d);</span><br><span class="line">        sort(data,data+n,cmp);</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> use = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(use + data[i].ti &lt;= k)</span><br><span class="line">            &#123;</span><br><span class="line">                ans += data[i].d;</span><br><span class="line">                use += data[i].ti;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(use &lt; k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">double</span> x = (<span class="keyword">double</span>)(k-use)/data[i].ti;</span><br><span class="line">                    ans += (<span class="keyword">double</span>)x*data[i].d;</span><br><span class="line">                    use = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Problem-E-简直欺负我不玩阴阳师"><a href="#Problem-E-简直欺负我不玩阴阳师" class="headerlink" title="Problem E: (简直欺负我不玩阴阳师)"></a>Problem E: (<del>简直欺负我不玩阴阳师</del>)</h3><p>(1s/32768k)</p><p>到五一假期的时候阴阳师又推出了这一活动，一张蓝色卡可以抽一次奖（每次用蓝色卡就会得到一点积分，满足10点积分额外送一张蓝色卡）抽奖是一个吸欧气的过程，每抽520次就能抽到一个ssr式神。ssr式神一共有10种，请问抽到相同ssr式神的概率有多少。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>第一行是一个整数T，表示数据组数，(1&lt;=T&lt;=10000)<br>每组输入一个整数n，表示初始蓝色卡个数。(0&lt;n&lt;=1000000000)</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出抽到相同式神的概率。（算得的结果小数点保留6位，概率的最大值为1）</p><h5 id="Sample-Input-4"><a href="#Sample-Input-4" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">123</span><br><span class="line">2560</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-4"><a href="#Sample-Output-4" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.000000</span><br><span class="line">0.697600</span><br></pre></td></tr></table></figure><h5 id="AC-Code-4"><a href="#AC-Code-4" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> fact[<span class="number">13</span>], cnt[<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>] = cnt[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">        fact[i] = fact[i<span class="number">-1</span>] * i;</span><br><span class="line">        cnt[i] = cnt[i<span class="number">-1</span>] * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ans += n;</span><br><span class="line">            left += n;</span><br><span class="line">            n = left/<span class="number">10</span>;</span><br><span class="line">            left %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans /= <span class="number">520</span>;</span><br><span class="line">     <span class="keyword">if</span>(ans &gt; <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">"1.000000\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans == <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, <span class="number">1.0</span>-fact[<span class="number">9</span>]/cnt[<span class="number">9</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, <span class="number">1.0</span>-fact[<span class="number">10</span>]/fact[<span class="number">10</span>-ans]/cnt[ans]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Problem-F-amp-amp-Problem-G-amp-amp-Problem-H"><a href="#Problem-F-amp-amp-Problem-G-amp-amp-Problem-H" class="headerlink" title="Problem F &amp;&amp; Problem G &amp;&amp; Problem H:"></a>Problem F &amp;&amp; Problem G &amp;&amp; Problem H:</h4><p>略（看不懂）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;恩，菜鸡和大佬之间的差距不是一天两天能追上的，当然思路正确写不出来是不可原谅的。。。。。。总之，很丢人orz&lt;/p&gt;
&lt;p&gt;虽然都是大部分是水题，但是还是把这部分分享出来吧w&lt;/p&gt;
&lt;p&gt;拿自己的和标程对比，人家的就是写的就是清爽漂亮，哎。。。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React与Express项目前后端一体化实战</title>
    <link href="https://www.yuyanlab.com/post/react-express/"/>
    <id>https://www.yuyanlab.com/post/react-express/</id>
    <published>2017-05-11T06:03:00.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的造轮子的过程中，前后端分离开来写实在蛋疼，所以最近决定研究并折腾一下前后端工程一体化。</p><p>在这样的实时的环境中，最重要的是做好前后端之间的协调作用，说白了，也就是路径规划问题与热刷新问题。</p><p>在我的项目中，我选择开发和生产的环境的加载代码制作两份，只有模板，中间件什么的代码的通用。(网上推崇使用env变量来加载热更新组件，但是本人并不推崇全部使用env)</p><p>主要就是分析几项内容，除了工程的路径规划，一是开发代码(app.js)，二是生产代码(server.js)，最后还有模板引擎的调整</p><a id="more"></a><p>首先是路径规划问题，两个甚至更多工程的合并，我们必须得把路径规划好</p><p>举个栗子（窝的）我选择把express脚手架生成的大部分文件放到server文件夹里，外面只留启动文件（相信熟悉express的同学一眼就能看出），前端react的代码放置到client里。启动代码在bin里<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── bin</span><br><span class="line">│   ├── dev.js</span><br><span class="line">│   └── server.js</span><br><span class="line">├── client</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── public</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── server</span><br><span class="line">│   ├── info</span><br><span class="line">│   ├── public</span><br><span class="line">│   ├── routes</span><br><span class="line">│   └── views</span><br><span class="line">├── server.js</span><br><span class="line">├── webpack.dev.config.js</span><br><span class="line">└── webpack.production.config.js</span><br></pre></td></tr></table></figure></p><p>启动脚本<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "cross-env NODE_ENV=production node ./bin/server.js",</span><br><span class="line">    "dev": "cross-env NODE_ENV=dev node ./bin/dev.js",</span><br><span class="line">    "bulid": "NODE_ENV=production webpack -p --config webpack.production.config.js"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="开发代码"><a href="#开发代码" class="headerlink" title="开发代码"></a>开发代码</h3><p>在开发中，我们需要调用webpackDevMiddleware和webpackHotMiddleware两套东西，当然，为了不发生找不到组件的尴尬情况，我们还是把大部分依赖装上吧,同样生产版本也需要用到一些组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev chunk-manifest-webpack-plugin cross-env html-webpack-plugin webpack-chunk-hash webpack-dev-middleware webpack-dev-server webpack-hot-middleware webpack-manifest-plugin</span><br></pre></td></tr></table></figure></p><p>在开发代码中，我们先使用cross-env设为dev，然后我们在开发版本的启动入口js里加入</p><p> 注意 ：需要在app定义后就要引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置环境变量</span></span><br><span class="line">app.locals.env = process.env.NODE_ENV || <span class="string">'dev'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 热加载功能导入</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>),</span><br><span class="line">    webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>),</span><br><span class="line">    webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>),</span><br><span class="line">    webpackDevConfig = <span class="built_in">require</span>(<span class="string">'./webpack.dev.config.js'</span>); <span class="comment">// 你自己创建的适用于开发版本的webpack配置。具体写法之后会说明</span></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(webpackDevConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 热加载功能挂载部分,里面的配置来自</span></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public path should be the same with webpack config</span></span><br><span class="line">    publicPath: webpackDevConfig.output.publicPath,</span><br><span class="line">    noInfo: <span class="literal">true</span>,</span><br><span class="line">    stats: &#123;</span><br><span class="line">        colors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(webpackHotMiddleware(compiler));</span><br></pre></td></tr></table></figure><p>在最后module.exports前加入重启相关代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> reload = <span class="built_in">require</span>(<span class="string">'reload'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(app);</span><br><span class="line">reload(server, app);</span><br></pre></td></tr></table></figure></p><p><del>我很担心这会增加很多占用</del></p><p>这样，在express里的内容就完了,模板引擎的调整我们放到最后讲。</p><p>接下来我们讲讲webpack.dev.config.js开发配置的问题,直接贴23333333。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> node_modules_dir = path.resolve(__dirname, <span class="string">'node_modules'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publicPath = <span class="string">'http://127.0.0.1:3000/'</span>;</span><br><span class="line"><span class="keyword">var</span> hotMiddlewareScript = <span class="string">'webpack-hot-middleware/client?reload=true'</span>; <span class="comment">//加载热跟新中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  entry: [ hotMiddlewareScript, <span class="string">'./client/index.js'</span>], <span class="comment">//使用热更新功能</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./server/public/static/js/'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: publicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader?presets[]=es2015&amp;presets[]=react'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 创建热更新热加载组件 */</span></span><br><span class="line">  plugins: [</span><br><span class="line">        <span class="comment">// new webpack.optimize.OccurenceOrderPlugin(), //用webpack1.0版本时才需要</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>这时候，大部分已经完成了，如果你急着试试，可以看文章最后有关模板引擎的内容，就可以启动你的开发版本的app.js，功能都得到了保留，webpack打包信息和express的信息都会console出来。</p><hr><h3 id="生产代码"><a href="#生产代码" class="headerlink" title="生产代码"></a>生产代码</h3><p>生产代码的express入口不需要怎么改动，只需设置下环境变量即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.locals.env = process.env.NODE_ENV || <span class="string">'production'</span>;</span><br></pre></td></tr></table></figure></p><p>重要的是webpack的配置文件，我在这里使用的是 webpack.production.config.js</p><p>在这里，最关键的一点是，如何把打包出来的带hash值的js的文件名传进后端模板中，这时我们需要webpack-manifest-plugin这个东西，</p><p>网上使用的很多推荐直接用inlineManifest去载入进ejs，但实际上非常不符合需求，webpack需要随时开启着，也不好用。直接贴代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">var</span> node_modules_dir = path.resolve(__dirname, <span class="string">'node_modules'</span>);</span><br><span class="line"><span class="keyword">var</span> ManifestPlugin = <span class="built_in">require</span>(<span class="string">'webpack-manifest-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: path.resolve(__dirname, <span class="string">'client/index.js'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'server/public/static/js'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash:16].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader?presets[]=es2015&amp;presets[]=react'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// Only .css files</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> ManifestPlugin(&#123;</span><br><span class="line">      fileName: <span class="string">'my-manifest.json'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>这里会在打包出的js同目录下生成一个json，记录了文件名。</p><p>所以这时候，我们就可以去express中间件里写功能去提取文件名，<del>这里我遇到了非常大的坑，虽然解决了，但都不好意思说出来</del>，然后呢，用了非常粗暴的方法…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mymanifest = <span class="built_in">require</span>(<span class="string">"../public/static/js/my-manifest"</span>);</span><br><span class="line"><span class="keyword">var</span> exportFileName = mymanifest[<span class="string">"main.js"</span>];</span><br><span class="line"><span class="keyword">var</span> filestring = <span class="string">'&lt;script src="/static/js/'</span> + exportFileName + <span class="string">'"&gt;&lt;/script&gt;'</span></span><br></pre></td></tr></table></figure><p>中间件改造完成，可以直接render进模板了</p><hr><h3 id="模板部分"><a href="#模板部分" class="headerlink" title="模板部分"></a>模板部分</h3><p>简单粗暴orz<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">env</span> !== <span class="string">"production"</span> ) &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">jsfile</span> %&gt;</span> <span class="comment">&lt;!-- jsfile是从render传过来的值“-”是为了防止被转译 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p><p>这时候，run一下build，webpack打包出东西，再start，就是标准生产的服务状态</p><hr><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="http://acgtofe.com/posts/2016/02/full-live-reload-for-express-with-webpack" target="_blank" rel="noopener">http://acgtofe.com/posts/2016/02/full-live-reload-for-express-with-webpack</a><br><a href="https://doc.webpack-china.org/guides/caching/" target="_blank" rel="noopener">https://doc.webpack-china.org/guides/caching/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的造轮子的过程中，前后端分离开来写实在蛋疼，所以最近决定研究并折腾一下前后端工程一体化。&lt;/p&gt;
&lt;p&gt;在这样的实时的环境中，最重要的是做好前后端之间的协调作用，说白了，也就是路径规划问题与热刷新问题。&lt;/p&gt;
&lt;p&gt;在我的项目中，我选择开发和生产的环境的加载代码制作两份，只有模板，中间件什么的代码的通用。(网上推崇使用env变量来加载热更新组件，但是本人并不推崇全部使用env)&lt;/p&gt;
&lt;p&gt;主要就是分析几项内容，除了工程的路径规划，一是开发代码(app.js)，二是生产代码(server.js)，最后还有模板引擎的调整&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个非常好用的npm包管理工具npm-check</title>
    <link href="https://www.yuyanlab.com/post/npm-check/"/>
    <id>https://www.yuyanlab.com/post/npm-check/</id>
    <published>2017-04-16T07:57:00.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多做node.js开发的小伙伴呢都遇到这样一个问题：我全局安装的脚手架，如何升级。或者，我某个项目里，很多组件都大幅更新了，增加了很多好用的新特性，我该如何去升级我所想升级的组件呢。常规使用的npm update呢，又不是很好用。偶然发现了这个好用的工具，分享给大家。</p><p>首先安装 <code>sudo npm install npm-check -g</code></p><p>然后，你就可以在该项目执行<code>npm-check</code>即可查看该项目下的依赖情况和新版的依赖情况，emoji表情意外萌呢~</p><p>它还会检测你在工程里import进的依赖，没有用到的依赖还会提示你去移除它。提示非常丰富。</p><p>// 分割线，首页不放图o(<em>////▽////</em>)q<br><a id="more"></a></p><p><img src="/img/npm-check-2.png" alt=""></p><p>如需升级工程下的依赖的话，在工程目录下执行<code>npm-check -u</code>，即可检查出可以升级的组件，空格选择，回车开始升级</p><p><img src="/img/npm-check-1.png" alt=""></p><p>如果是升级诸如脚手架之类的全局组件，执行<code>sudo npm-check -u -g</code>，使用同理。</p><p>主要用法就这两个，其他用法使用<code>npm-check --help</code>查看即可。</p><p>恩，就酱紫~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多做node.js开发的小伙伴呢都遇到这样一个问题：我全局安装的脚手架，如何升级。或者，我某个项目里，很多组件都大幅更新了，增加了很多好用的新特性，我该如何去升级我所想升级的组件呢。常规使用的npm update呢，又不是很好用。偶然发现了这个好用的工具，分享给大家。&lt;/p&gt;
&lt;p&gt;首先安装 &lt;code&gt;sudo npm install npm-check -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后，你就可以在该项目执行&lt;code&gt;npm-check&lt;/code&gt;即可查看该项目下的依赖情况和新版的依赖情况，emoji表情意外萌呢~&lt;/p&gt;
&lt;p&gt;它还会检测你在工程里import进的依赖，没有用到的依赖还会提示你去移除它。提示非常丰富。&lt;/p&gt;
&lt;p&gt;// 分割线，首页不放图o(&lt;em&gt;////▽////&lt;/em&gt;)q&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在墙内部署docker镜像的正确姿势</title>
    <link href="https://www.yuyanlab.com/post/docker_cn/"/>
    <id>https://www.yuyanlab.com/post/docker_cn/</id>
    <published>2017-03-21T14:22:00.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说换镜像什么的都是扯淡，根本无法好好使用。"><a href="#说换镜像什么的都是扯淡，根本无法好好使用。" class="headerlink" title="说换镜像什么的都是扯淡，根本无法好好使用。"></a>说换镜像什么的都是扯淡，根本无法好好使用。</h4><p>本文将会告诉你在墙内部署docker应用的正确姿势。</p><h4 id="本文基于Ubuntu-16-04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。"><a href="#本文基于Ubuntu-16-04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。" class="headerlink" title="本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。"></a>本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。</h4><p>如果你的环境是aliyun ecs请前往<code>/etc/apt/source.list</code>里把所有mirrors.aliyuncs.com的镜像注释掉！</p><p>检查内核是否需要升级 <code>uname -a</code>查看，大于3.16即可。如果小于3.16，可以按照这篇教程换掉你的内核并提升你的服务器性能: <a href="https://emiria.io/post/TCP-BBR/" target="_blank" rel="noopener">https://emiria.io/post/TCP-BBR/</a></p><h4 id="接下来是具体步骤。"><a href="#接下来是具体步骤。" class="headerlink" title="接下来是具体步骤。"></a>接下来是具体步骤。</h4><a id="more"></a><p>首先 <code>apt-get update</code></p><p>安装screen：<code>apt-get install screen</code><br>建立一个screen窗口：<code>screen -S installDocker</code></p><p>然后，安装配置shadowsocks（没代理玩个鬼）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python</span><br><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></p><p>在Ubuntu1604上，可能安装ss会报错：<code>locale.Error: unsupported locale setting</code><br>输入<code>export LC_ALL=C</code>即可。</p><p>在方便的位置建立一个 ss.json并在里面根据实际情况填入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;11.22.33.44&quot;,</span><br><span class="line">  &quot;server_port&quot;: 40002,</span><br><span class="line">  &quot;local_port&quot;: 1080,</span><br><span class="line">  &quot;password&quot;: &quot;123123123&quot;,</span><br><span class="line">  &quot;timeout&quot;: 600,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动shadowssocks<br><code>sslocal -c ss.json -d start</code><br>PS：如果机器重启后需要重新执行</p><p>我们需要一个工具来吧socks5代理转换为http代理&gt;&gt; polipo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install polipo</span><br></pre></td></tr></table></figure></p><p>修改<code>/etc/polipo/config</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">logSyslog = true</span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line">proxyAddress = &quot;0.0.0.0&quot;</span><br><span class="line">socksParentProxy = &quot;127.0.0.1:1080&quot;</span><br><span class="line">socksProxyType = socks5</span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br></pre></td></tr></table></figure></p><p>重启polipo：<code>/etc/init.d/polipo restart</code></p><p>配置代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;http://127.0.0.1:8123/&quot;</span><br><span class="line">export https_proxy=&quot;http://127.0.0.1:8123/&quot;</span><br></pre></td></tr></table></figure></p><h3 id="注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭unset-http-proxy。"><a href="#注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭unset-http-proxy。" class="headerlink" title="注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭unset http_proxy。"></a>注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭<code>unset http_proxy</code>。</h3><p>你可以使用 <code>curl myip.ipip.net</code>命令来校验代理是否开启成功。</p><p>这时，你可以愉悦的在全局代理下安装docker了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://get.docker.io/ | sh</span><br></pre></td></tr></table></figure></p><h4 id="关于docker的http代理"><a href="#关于docker的http代理" class="headerlink" title="关于docker的http代理"></a>关于docker的http代理</h4><p>以下docker代理的配置文件摘自docker官网，亲测可行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure><p>在<code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://127.0.0.1:8123/&quot;</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>使用<code>systemctl show --property=Environment docker</code>来查看是否写入成功。</p><p>到此为止，应付大部分docker容器应该是够了！</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说换镜像什么的都是扯淡，根本无法好好使用。&quot;&gt;&lt;a href=&quot;#说换镜像什么的都是扯淡，根本无法好好使用。&quot; class=&quot;headerlink&quot; title=&quot;说换镜像什么的都是扯淡，根本无法好好使用。&quot;&gt;&lt;/a&gt;说换镜像什么的都是扯淡，根本无法好好使用。&lt;/h4&gt;&lt;p&gt;本文将会告诉你在墙内部署docker应用的正确姿势。&lt;/p&gt;
&lt;h4 id=&quot;本文基于Ubuntu-16-04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。&quot;&gt;&lt;a href=&quot;#本文基于Ubuntu-16-04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。&quot; class=&quot;headerlink&quot; title=&quot;本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。&quot;&gt;&lt;/a&gt;本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。&lt;/h4&gt;&lt;p&gt;如果你的环境是aliyun ecs请前往&lt;code&gt;/etc/apt/source.list&lt;/code&gt;里把所有mirrors.aliyuncs.com的镜像注释掉！&lt;/p&gt;
&lt;p&gt;检查内核是否需要升级 &lt;code&gt;uname -a&lt;/code&gt;查看，大于3.16即可。如果小于3.16，可以按照这篇教程换掉你的内核并提升你的服务器性能: &lt;a href=&quot;https://emiria.io/post/TCP-BBR/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://emiria.io/post/TCP-BBR/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;接下来是具体步骤。&quot;&gt;&lt;a href=&quot;#接下来是具体步骤。&quot; class=&quot;headerlink&quot; title=&quot;接下来是具体步骤。&quot;&gt;&lt;/a&gt;接下来是具体步骤。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dell R410服务器踩坑总结</title>
    <link href="https://www.yuyanlab.com/post/DellR410-BIOS/"/>
    <id>https://www.yuyanlab.com/post/DellR410-BIOS/</id>
    <published>2017-03-03T15:10:00.000Z</published>
    <updated>2017-12-02T02:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>翘了大学语文课去机房上架服务器被语文老师抓到，这种事情一定是终生难忘的（哭）。</p><p>好了，以下来介绍所踩的坑。</p><p>某202.xxx.xxx.xxx/28的ip是我们社团的服务器所使用，但由于年久失修，宕了只有一台了orz，于是fix的这个任务就落到了我的头上了orz。</p><p>由于是接手的，只留下了一个记录了密码和用户名什么的文档来，只能靠自己摸索，架构是多台Apache+php环境组成的集群和一台数据库服务器组成，具体配置无法测试（基本的命令都缺失，有必要全部重做系统了），内网带宽实测100mbps。但数据库服务器的raid早已坏掉，各种丢数据，唯一剩下来的一台也不敢动，于是，只能贡献出我自己的R410了。</p><p>R410的网卡是博通一种服务器网卡，很可惜Debian初始并不带网卡驱动，需要后续在没网的情况下手动安装，故舍弃Debian。Ubuntu 16.04.2 LTS在写入系统时又发生失败。centos才是最适合R410的系统orz。</p><p>R410集成了非常强大的BIOS和远控卡，然而正是强大，导致了使用不是很方便，个人非常不推荐使用UEFI引导，而且也非常不好用。<br>在不小心按了F10进入了UEFI后，你将会经历漫长的等待，看着<code>Initializing UEFI,Please wait...</code>(&gt;=1hr)，而且极有可能加载失败。所以我们要做的就是，关闭电源，再开启电源，加载完BIOS后迅速按下Ctrl 和E键，进入菜单，进入System Services选项菜单里并把它关掉。保存退出，继续加载bios的过程中再去F11里选择u盘启动。</p><p>安装完centos后有个非常恶心的阅读协议，这个只能Good luck了。在实际上架服务器中，我们不可能使用DHCP协议获取ip，只能手动配置ip，在参考另外一台服务器的配置文件后顺利完成了ip的配置，其实图形化界面下的centos配置防火墙很容易23333333</p><p>PS：机房老师中途进来看到raid的配置和机器上4个盘位只插了一块盘有点想笑，我能怎么办，我也没钱买硬盘哇(╯‵□′)╯︵┻━┻</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翘了大学语文课去机房上架服务器被语文老师抓到，这种事情一定是终生难忘的（哭）。&lt;/p&gt;
&lt;p&gt;好了，以下来介绍所踩的坑。&lt;/p&gt;
&lt;p&gt;某202.xxx.xxx.xxx/28的ip是我们社团的服务器所使用，但由于年久失修，宕了只有一台了orz，于是fix的这个任务就落到了我的头上了orz。&lt;/p&gt;
&lt;p&gt;由于是接手的，只留下了一个记录了密码和用户名什么的文档来，只能靠自己摸索，架构是多台Apache+php环境组成的集群和一台数据库服务器组成，具体配置无法测试（基本的命令都缺失，有必要全部重做系统了），内网带宽实测100mbps。但数据库服务器的raid早已坏掉，各种丢数据，唯一剩下来的一台也不敢动，于是，只能贡献出我自己的R410了。&lt;/p&gt;
&lt;p&gt;R410的网卡是博通一种服务器网卡，很可惜Debian初始并不带网卡驱动，需要后续在没网的情况下手动安装，故舍弃Debian。Ubuntu 16.04.2 LTS在写入系统时又发生失败。centos才是最适合R410的系统orz。&lt;/p&gt;
&lt;p&gt;R410集成了非常强大的BIOS和远控卡，然而正是强大，导致了使用不是很方便，个人非常不推荐使用UEFI引导，而且也非常不好用。&lt;br&gt;在不小心按了F10进入了UEFI后，你将会经历漫长的等待，看着&lt;code&gt;Initializing UEFI,Please wait...&lt;/code&gt;(&amp;gt;=1hr)，而且极有可能加载失败。所以我们要做的就是，关闭电源，再开启电源，加载完BIOS后迅速按下Ctrl 和E键，进入菜单，进入System Services选项菜单里并把它关掉。保存退出，继续加载bios的过程中再去F11里选择u盘启动。&lt;/p&gt;
&lt;p&gt;安装完centos后有个非常恶心的阅读协议，这个只能Good luck了。在实际上架服务器中，我们不可能使用DHCP协议获取ip，只能手动配置ip，在参考另外一台服务器的配置文件后顺利完成了ip的配置，其实图形化界面下的centos配置防火墙很容易23333333&lt;/p&gt;
&lt;p&gt;PS：机房老师中途进来看到raid的配置和机器上4个盘位只插了一块盘有点想笑，我能怎么办，我也没钱买硬盘哇(╯‵□′)╯︵┻━┻&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
